/*
 * Gap Data
 * Copyright (C) 2009 John Pritchard
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 * 02110-1301 USA.
 */
package {{=package_name}};
{{#import}}
import {{=import_spec}};{{/import}}

import gap.*;
import gap.data.*;
import gap.hapax.TemplateDataDictionary;
import gap.hapax.TemplateName;
import gap.util.*;

import com.google.appengine.api.datastore.*;

import java.util.Date;

import javax.annotation.Generated;

/**
 * Generated bean data binding.
 *
 * @see {{=class_name}}
 */
@Generated(value={"{{=odl_gen_class}}","{{=odl_gen_xtm_src}}"},date="{{=odl_gen_timestamp}}")
public abstract class {{=class_name}}Data
    extends gap.data.BigTable
    implements DataInheritance<{{=class_name}}>{{#implements}}{{#implements_it_First}},{{/implements_it_First}}
               {{=interface_class}}{{#implements_it_NotLast}},{{/implements_it_NotLast}}{{/implements}}
{

    private final static long serialVersionUID = {{=class_version}};

    public final static Kind KIND = Kind.Create("{{=class_kind}}","{{=package_name}}","{{=class_name}}","{{=class_path}}");

    public final static String ClassName = "{{=class_name}}";

    public final static String DefaultSortBy = "{{=class_defaultSortBy}}";


    public final static gap.service.od.ClassDescriptor ClassDescriptorFor(){
        return ClassDescriptorFor({{=class_name}}.class);
    }{{#class_re_child_or_group}}
    public final static gap.service.od.ClassDescriptor ClassDescriptorForParent(){
        return ClassDescriptorFor({{=parent_class_name}}.class);
    }{{/class_re_child_or_group}}

{{#field_hash_unique}}

{{#class_re_not_child_or_group}}
    public final static Key KeyLong{{=field_unique_nameCamel}}For({{#field}}{{#field_it_NotFirst}}, {{/field_it_NotFirst}}{{=field_class}} {{=field_name}}{{/field}}){
        String id = {{=field_unique_nameCamel}}For({{#field}}{{#field_it_NotFirst}}, {{/field_it_NotFirst}} {{=field_name}}{{/field}});
        return KeyLongFor(id);
    }{{/class_re_not_child_or_group}}{{#class_re_child}}
    public final static Key KeyLong{{=field_unique_nameCamel}}For(Key ancestor, {{#field}}{{#field_it_NotFirst}}, {{/field_it_NotFirst}}{{=field_class}} {{=field_name}}{{/field}}){
        String id = {{=field_unique_nameCamel}}For(ancestor,{{#field}}{{#field_it_NotFirst}}, {{/field_it_NotFirst}} {{=field_name}}{{/field}});
        return KeyLongFor(ancestor,id);
    }{{/class_re_child}}{{#class_re_childgroup}}
    public final static Key KeyShort{{=field_unique_nameCamel}}For(Key ancestor, {{#field}}{{#field_it_NotFirst}}, {{/field_it_NotFirst}}{{=field_class}} {{=field_name}}{{/field}}){
        String id = {{=field_unique_nameCamel}}For(ancestor,{{#field}}{{#field_it_NotFirst}}, {{/field_it_NotFirst}} {{=field_name}}{{/field}});
        return KeyShortFor(ancestor,id);
    }{{/class_re_childgroup}}

{{#class_re_not_child_or_group}}
    public final static String {{=field_unique_nameCamel}}For({{#field}}{{#field_it_NotFirst}}, {{/field_it_NotFirst}}{{=field_class}} {{=field_name}}{{/field}}){
        if ({{#field}}{{#field_it_NotFirst}} && {{/field_it_NotFirst}}null != {{=field_name}}{{/field}}){{{#field}}
            String {{=field_name}}String = {{=field_to_string_prefix}}{{=field_name}}{{=field_to_string_suffix}};{{/field}}
            return gap.data.Hash.For({{#field}}{{#field_it_NotFirst}}+'/'+{{/field_it_NotFirst}}{{=field_name}}String{{/field}});
        }
        else
            throw new IllegalArgumentException();
    }{{/class_re_not_child_or_group}}{{#class_re_child_or_group}}
    public final static String {{=field_unique_nameCamel}}For(Key ancestor, {{#field}}{{#field_it_NotFirst}}, {{/field_it_NotFirst}}{{=field_class}} {{=field_name}}{{/field}}){
        if (ancestor.isComplete() && {{#field}}{{#field_it_NotFirst}} && {{/field_it_NotFirst}}null != {{=field_name}}{{/field}}){{{#field}}
            String {{=field_name}}String = {{=field_to_string_prefix}}{{=field_name}}{{=field_to_string_suffix}};{{/field}}
            return gap.data.Hash.For(ToString(ancestor)+'/'+{{#field}}{{#field_it_NotFirst}}+'/'+{{/field_it_NotFirst}}{{=field_name}}String{{/field}});
        }
        else
            throw new IllegalArgumentException();
    }{{/class_re_child_or_group}}

{{#class_re_not_child_or_group}}
    public final static {{=class_name}} ForLong{{#field}}{{=field_nameCamel}}{{/field}}({{#field}}{{#field_it_NotFirst}}, {{/field_it_NotFirst}}{{=field_class}} {{=field_name}}{{/field}}){
        if ({{#field}}{{#field_it_NotFirst}} && {{/field_it_NotFirst}}null != {{=field_name}}{{/field}}){
            Key key = KeyLong{{=field_unique_nameCamel}}For({{#field}}{{#field_it_NotFirst}},{{/field_it_NotFirst}} {{=field_name}}{{/field}});
            {{=class_name}} instance = ({{=class_name}})gap.data.Store.Get(key);
            if (null != instance)
                return instance;
            else {
                Query q = CreateQueryFor(key);
                return ({{=class_name}})gap.data.Store.Query1(q);
            }
        }
        else
            throw new IllegalArgumentException();
    }{{/class_re_not_child_or_group}}{{#class_re_child}}
    public final static {{=class_name}} ForLong{{#field}}{{=field_nameCamel}}{{/field}}(Key ancestor, {{#field}}{{#field_it_NotFirst}}, {{/field_it_NotFirst}}{{=field_class}} {{=field_name}}{{/field}}){
        if ({{#field}}{{#field_it_NotFirst}} && {{/field_it_NotFirst}}null != {{=field_name}}{{/field}}){
            Key key = KeyLong{{=field_unique_nameCamel}}For(ancestor,{{#field}}{{#field_it_NotFirst}},{{/field_it_NotFirst}} {{=field_name}}{{/field}});
            {{=class_name}} instance = ({{=class_name}})gap.data.Store.Get(key);
            if (null != instance)
                return instance;
            else {
                Query q = CreateQueryFor(key);
                return ({{=class_name}})gap.data.Store.Query1(q);
            }
        }
        else
            throw new IllegalArgumentException();
    }{{/class_re_child}}{{#class_re_childgroup}}
    public final static {{=class_name}} ForShort{{#field}}{{=field_nameCamel}}{{/field}}(Key ancestor, {{#field}}{{#field_it_NotFirst}}, {{/field_it_NotFirst}}{{=field_class}} {{=field_name}}{{/field}}){
        if ({{#field}}{{#field_it_NotFirst}} && {{/field_it_NotFirst}}null != {{=field_name}}{{/field}}){
            Key key = KeyShort{{=field_unique_nameCamel}}For(ancestor,{{#field}}{{#field_it_NotFirst}},{{/field_it_NotFirst}} {{=field_name}}{{/field}});
            {{=class_name}} instance = ({{=class_name}})gap.data.Store.Get(key);
            if (null != instance)
                return instance;
            else {
                Query q = CreateQueryFor(key);
                return ({{=class_name}})gap.data.Store.Query1(q);
            }
        }
        else
            throw new IllegalArgumentException();
    }{{/class_re_childgroup}}

{{#class_re_not_child_or_group}}
    public final static {{=class_name}} GetCreateLong({{#field}}{{#field_it_NotFirst}}, {{/field_it_NotFirst}}{{=field_class}} {{=field_name}}{{/field}}){
        {{=class_name}} {{=class_nameDecamel}} = ForLong{{#field}}{{=field_nameCamel}}{{/field}}({{#field}}{{#field_it_NotFirst}},{{/field_it_NotFirst}} {{=field_name}}{{/field}});
        if (null == {{=class_nameDecamel}}){
            {{=class_nameDecamel}} = new {{=class_name}}({{#field}}{{#field_it_NotFirst}},{{/field_it_NotFirst}} {{=field_name}}{{/field}});
            {{=class_nameDecamel}} = ({{=class_name}})gap.data.Store.Put({{=class_nameDecamel}});
        }
        return {{=class_nameDecamel}};
    }{{/class_re_not_child_or_group}}{{#class_re_child}}
    public final static {{=class_name}} GetCreateLong(Key ancestor, {{#field}}{{#field_it_NotFirst}}, {{/field_it_NotFirst}}{{=field_class}} {{=field_name}}{{/field}}){
        {{=class_name}} {{=class_nameDecamel}} = ForLong{{#field}}{{=field_nameCamel}}{{/field}}(ancestor,{{#field}}{{#field_it_NotFirst}},{{/field_it_NotFirst}} {{=field_name}}{{/field}});
        if (null == {{=class_nameDecamel}}){
            {{=class_nameDecamel}} = new {{=class_name}}(ancestor,{{#field}}{{#field_it_NotFirst}},{{/field_it_NotFirst}} {{=field_name}}{{/field}});
            {{=class_nameDecamel}} = ({{=class_name}})gap.data.Store.Put({{=class_nameDecamel}});
        }
        return {{=class_nameDecamel}};
    }{{/class_re_child}}{{#class_re_childgroup}}
    public final static {{=class_name}} GetCreateShort(Key ancestor, {{#field}}{{#field_it_NotFirst}}, {{/field_it_NotFirst}}{{=field_class}} {{=field_name}}{{/field}}){
        {{=class_name}} {{=class_nameDecamel}} = ForShort{{#field}}{{=field_nameCamel}}{{/field}}(ancestor,{{#field}}{{#field_it_NotFirst}},{{/field_it_NotFirst}} {{=field_name}}{{/field}});
        if (null == {{=class_nameDecamel}}){
            {{=class_nameDecamel}} = new {{=class_name}}(ancestor,{{#field}}{{#field_it_NotFirst}},{{/field_it_NotFirst}} {{=field_name}}{{/field}});
            {{=class_nameDecamel}} = ({{=class_name}})gap.data.Store.Put({{=class_nameDecamel}});
        }
        return {{=class_nameDecamel}};
    }{{/class_re_childgroup}}
{{/field_hash_unique}}
{{#field_unique}}
{{#class_re_not_child_or_group}}
    public final static Key KeyLongFor(String {{=field_name}}){
        return KeyFactory.createKey(KIND.getName(),id);
    }{{/class_re_not_child_or_group}}{{#class_re_childgroup}}
    public final static Key KeyShortFor(Key ancestor, String {{=field_name}}){
        return KeyFactory.createKey(ancestor,KIND.getName(),id);
    }{{/class_re_childgroup}}{{#class_re_child}}
    public final static Key KeyLongFor(Key ancestor, String {{=field_name}}){
        return KeyFactory.createKey(KIND.getName(),id);
    }{{/class_re_child}}

{{#class_re_not_child_or_group}}
    public final static {{=class_name}} ForLong{{=field_nameCamel}}(String {{=field_name}}){
        if (null != {{=field_name}}){
            Key key = KeyLongFor({{=field_name}});
            {{=class_name}} instance = ({{=class_name}})gap.data.Store.Get(key);
            if (null != instance)
                return instance;
            else {
                Query q = CreateQueryFor(key);
                return ({{=class_name}})gap.data.Store.Query1(q);
            }
        }
        else
            throw new IllegalArgumentException();
    }{{/class_re_not_child_or_group}}{{#class_re_child}}
    public final static {{=class_name}} ForLong{{=field_nameCamel}}(Key ancestor, String {{=field_name}}){
        if (null != ancestor && ancestor.isComplete() && null != {{=field_name}}){
            Key key = KeyLongFor(ancestor,{{=field_name}});
            {{=class_name}} instance = ({{=class_name}})gap.data.Store.Get(key);
            if (null != instance)
                return instance;
            else {
                Query q = CreateQueryFor(key);
                return ({{=class_name}})gap.data.Store.Query1(q);
            }
        }
        else
            throw new IllegalArgumentException();
    }{{/class_re_child}}{{#class_re_childgroup}}
    public final static {{=class_name}} ForShort{{=field_nameCamel}}(Key ancestor, String {{=field_name}}){
        if (null != ancestor && ancestor.isComplete() && null != {{=field_name}}){
            Key key = KeyShortFor(ancestor,{{=field_name}});
            {{=class_name}} instance = ({{=class_name}})gap.data.Store.Get(key);
            if (null != instance)
                return instance;
            else {
                Query q = CreateQueryFor(key);
                return ({{=class_name}})gap.data.Store.Query1(q);
            }
        }
        else
            throw new IllegalArgumentException();
    }{{/class_re_childgroup}}
{{/field_unique}}

    public final static {{=class_name}} Get(Key key){
        if (null != key){
            {{=class_name}} instance = ({{=class_name}})gap.data.Store.Get(key);
            if (null != instance)
                return instance;
            else {
                Query q = CreateQueryFor(key);
                return ({{=class_name}})gap.data.Store.Query1(q);
            }
        }
        else
            throw new IllegalArgumentException();
    }
    public final static Key GetKey(Key key){
        if (null != key){
            Query q = CreateQueryFor(key);
            return gap.data.Store.QueryKey1(q);
        }
        else
            throw new IllegalArgumentException();
    }
    public final static {{=class_name}} FromObject(Object value){
        if (null == value)
            return null;
        else if (value instanceof {{=class_name}})
            return ({{=class_name}})value;
        else if (value instanceof Key)
            return Get( (Key)value);
        else if (value instanceof String){
            /*
             * TODO: ilarg: not key.enc; Key For ID.
             */
            Key key = gap.Strings.KeyFromString( (String)value);
            return Get(key);
        }
        else
            throw new IllegalArgumentException(value.getClass().getName());
    }

{{#class_re_child}}
    /**
     * Test for uniqueness and iterate under collisions.
     */
    public final static Key NewRandomKeyLong(Key ancestor){
        if (null != ancestor){
            /*
             * Source matter for data local uniqueness
             */
            String source = gap.data.BigTable.ToString(ancestor);
            long matter = gap.data.Hash.Djb64(source);
            /*
             * Random matter for network global uniqueness
             */
            java.util.Random random = new java.util.Random();
            do {
                matter ^= random.nextLong();
                String idString = gap.data.Hash.Hex(matter);
                Key key = KeyFactory.createKey(KIND.getName(),idString);
                if (null == GetKey(key))
                    return key;
            }
            while (true);
        }
        else
            throw new IllegalArgumentException();
    }{{/class_re_child}}{{#class_re_childgroup}}
    /**
     * Test for uniqueness and iterate under collisions.
     */
    public final static Key NewRandomKeyShort(Key ancestor){
        if (null != ancestor){
            /*
             * Source matter for data local uniqueness
             */
            String source = gap.data.BigTable.ToString(ancestor);
            long matter = gap.data.Hash.Djb64(source);
            /*
             * Random matter for network global uniqueness
             */
            java.util.Random random = new java.util.Random();
            do {
                matter ^= random.nextLong();
                String idString = gap.data.Hash.Hex(matter);
                Key key = KeyFactory.createKey(ancestor,KIND.getName(),idString);
                if (null == GetKey(key))
                    return key;
            }
            while (true);
        }
        else
            throw new IllegalArgumentException();
    }{{/class_re_childgroup}}

    /**
     * Drop the instance and any children of its key from the world,
     * memcache and store.
     */
    public final static void Delete({{=class_name}} instance){
        if (null != instance){
            Key key = instance.getKey();
            gap.data.Store.DeleteCollection(KIND,new Query(key));
            gap.data.Store.Delete(key);
        }
    }
    /**
     * Drop the instance from memcache, exclusively.
     */
    public final static void Clean({{=class_name}} instance){
        if (null != instance){
            Key key = instance.getKey();
            gap.data.Store.Clean(key);
        }
    }
    /**
     * Store the instance.
     */
    public final static void Save({{=class_name}} instance){
        if (null != instance){
            gap.data.Store.Put(instance);
        }
    }
    /**
     * Write the instance to store.
     */
    public final static void Store({{=class_name}} instance){
        if (null != instance){
            gap.data.Store.Put(instance);
        }
    }
    /**
     * Default sort
     */
    public final static Query CreateQueryFor(){
        return new Query(KIND.getName()).addSort(DefaultSortBy);
    }
    /**
     * Default sort
     */
    public final static Query CreateQueryFor(Key key){
        return new Query(KIND.getName(),key).addSort(DefaultSortBy);
    }{{#class_re_not_child_or_group}}
    /**
     * Filter ops
     */
    public final static Query CreateQueryFor(Filter filter){
        Query query = new Query(KIND.getName());
        return filter.update(query);
    }{{/class_re_not_child_or_group}}
    {{#class_re_child}}
    /**
     * Filter ops
     */
    public final static Query CreateQueryFor(Filter filter){
        Query query = new Query(KIND.getName());
        return filter.update(query);
    }{{/class_re_child}}
    {{#class_re_childgroup}}
    /**
     * Filter ops
     */
    public final static Query CreateQueryFor(Key ancestor, Filter filter){
        Query query = new Query(KIND.getName(),ancestor);
        return filter.update(query);
    }{{/class_re_childgroup}}
    public final static {{=class_name}} Query1(Query query){
        if (null != query)
            return ({{=class_name}})gap.data.Store.Query1(query);
        else
            throw new IllegalArgumentException();
    }
    public final static BigTableIterator QueryN(Query query, Page page){
        if (null != query && null != page)
            return gap.data.Store.QueryN(query,page);
        else
            throw new IllegalArgumentException();
    }
    public final static Key QueryKey1(Query query){
        if (null != query)
            return gap.data.Store.QueryKey1(query);
        else
            throw new IllegalArgumentException();
    }
    public final static List.Primitive<Key> QueryKeyN(Query query, Page page){
        if (null != query)
            return gap.data.Store.QueryKeyN(query,page);
        else
            throw new IllegalArgumentException();
    }

    /**
     * Persistent fields' binding for {@link {{=class_name}}}
     */
    public static enum Field
        implements gap.data.Field<Field>
    {
        InheritFromKey("inheritFromKey",Type.Primitive),{{#class_re_child_or_group}}
        ParentKey("parentKey",Type.Primitive),{{/class_re_child_or_group}}
        Key("key",Type.Primitive),{{#field}}
        {{=field_nameCamel}}("{{=field_name}}",Type.{{#field_is_primitive}}Primitive{{/field_is_primitive}}{{#field_is_bigTable}}BigTable{{/field_is_bigTable}}{{#field_is_collection}}Collection{{/field_is_collection}}){{#field_it_NotLast}},{{/field_it_NotLast}}{{#field_it_Last}};{{/field_it_Last}}{{/field}}

        private final static lxl.Map<String,Field> FieldName = new lxl.Map<String,Field>();
        public static final String[] AllNames;
        static {
            Field[] allFields = Field.values();
            int count = allFields.length;
            String[] names = new String[count];
            for (int cc = 0; cc < count; cc++) {
                Field field = allFields[cc];
                String fieldName = field.getFieldName();
                names[cc] = fieldName;
                FieldName.put(fieldName,field);
            }
            AllNames = names;
        }
        public static Field getField(String name) {
            return FieldName.get(name);
        }
        public static Field For(String name) {
            Field field = FieldName.get(name);
            if (null == field)
                return Field.valueOf(name);
            else
                return field;
        }
        public static Object Get(Field field, {{=class_name}} instance, boolean mayInherit){
            switch(field){
            case InheritFromKey:
                return instance.getInheritFromKey();{{#class_re_child_or_group}}
            case ParentKey:
                return instance.getParentKey();{{/class_re_child_or_group}}
            case Key:
                return instance.getKey();{{#field}}
            case {{=field_nameCamel}}:
                return instance.get{{=field_nameCamel}}(mayInherit);{{/field}}
            default:
                throw new IllegalArgumentException(field.toString()+" in {{=class_name}}");
            }
        }
        public static boolean Set(Field field, {{=class_name}} instance, Object value){
            switch(field){
            case InheritFromKey:
                return instance.setInheritFromKey(gap.Objects.KeyFromObject(value));{{#class_re_child_or_group}}
            case ParentKey:
                return instance.setParentKey(gap.Objects.KeyFromObject(value));{{/class_re_child_or_group}}
            case Key:
                return instance.setKey(gap.Objects.KeyFromObject(value));{{#field}}{{#field_is_not_collection}}
            case {{=field_nameCamel}}:
                return instance.set{{=field_nameCamel}}({{=field_from_object_prefix}}value{{=field_from_object_suffix}});{{/field_is_not_collection}}{{/field}}
            default:
                throw new IllegalArgumentException(field.toString()+" in {{=class_name}}");
            }
        }


        private final String fieldName;

        private final Type fieldType;

        private final boolean fieldTypePrimitive, fieldTypeBigTable, fieldTypeCollection;


        Field(String fieldName, Type fieldType){
            if (null != fieldName && null != fieldType){
                this.fieldName = fieldName;
                this.fieldType = fieldType;
                switch (fieldType){
                case Primitive:
                    this.fieldTypePrimitive = true;
                    this.fieldTypeBigTable = false;
                    this.fieldTypeCollection = false;
                    break;
                case BigTable:
                    this.fieldTypePrimitive = false;
                    this.fieldTypeBigTable = true;
                    this.fieldTypeCollection = false;
                    break;
                case Collection:
                    this.fieldTypePrimitive = false;
                    this.fieldTypeBigTable = false;
                    this.fieldTypeCollection = true;
                    break;
                default:
                    throw new IllegalStateException("Unimplemented field type "+fieldType);
                }
            }
            else
                throw new IllegalStateException();
        }


        public String getFieldName(){
            return this.fieldName;
        }
        public Type getFieldType(){
            return this.fieldType;
        }
        public boolean isFieldTypePrimitive(){
            return this.fieldTypePrimitive;
        }
        public boolean isNotFieldTypePrimitive(){
            return (!this.fieldTypePrimitive);
        }
        public boolean isFieldTypeBigTable(){
            return this.fieldTypeBigTable;
        }
        public boolean isNotFieldTypeBigTable(){
            return (!this.fieldTypeBigTable);
        }
        public boolean isFieldTypeCollection(){
            return this.fieldTypeCollection;
        }
        public boolean isNotFieldTypeCollection(){
            return (!this.fieldTypeCollection);
        }
        public String toString(){
            return this.fieldName;
        }
    }

    private volatile transient {{=class_name}} inheritFrom;

{{#pfield}}{{#field_is_primitive}}
    private volatile {{=field_class}} {{=field_name}};    {{#field_is_unique}}// {{=data_model}}{{/field_is_unique}}{{#field_is_hash_unique}}// {{=data_model}}{{/field_is_hash_unique}}{{/field_is_primitive}}{{#field_is_bigTable}}
    private volatile Key {{=field_name}}Key;
    private volatile transient {{=field_class}} {{=field_name}};{{/field_is_bigTable}}{{/pfield}}{{#cfield}}
    private volatile {{=field_class}} {{=field_name}};{{/cfield}}{{#tfield}}
    private volatile transient {{=field_class}} {{=field_name}};{{/tfield}}

{{#class_re_child_or_group}}
    private volatile Key parentKey;
    private volatile transient {{=parent_class_name}} parent;{{/class_re_child_or_group}}


    protected {{=class_name}}Data() {
        super();
    }{{#field_hash_unique}}{{#class_re_not_child_or_group}}
    protected {{=class_name}}Data({{#field}}{{#field_it_NotFirst}}, {{/field_it_NotFirst}}{{=field_class}} {{=field_name}}{{/field}}) {
        super();{{#field}}
        this.set{{=field_nameCamel}}({{=field_name}});{{/field}}
        String {{=field_unique_name}} = {{=field_unique_nameCamel}}For({{#field}}{{#field_it_NotFirst}},{{/field_it_NotFirst}} {{=field_name}}{{/field}});
        this.set{{=field_unique_nameCamel}}({{=field_unique_name}});
        Key key = KeyLongFor({{=field_unique_name}});
        this.setKey(key);
    }{{/class_re_not_child_or_group}}{{#class_re_child_or_group}}
    protected {{=class_name}}Data(Key ancestor, {{#field}}{{#field_it_NotFirst}}, {{/field_it_NotFirst}}{{=field_class}} {{=field_name}}{{/field}}) {
        super();{{#field}}
        this.set{{=field_nameCamel}}({{=field_name}});{{/field}}
        this.parentKey = ancestor;
        String {{=field_unique_name}} = {{=field_unique_nameCamel}}For(ancestor, {{#field}}{{#field_it_NotFirst}},{{/field_it_NotFirst}} {{=field_name}}{{/field}});
        this.set{{=field_unique_nameCamel}}({{=field_unique_name}});{{#class_re_childgroup}}
        Key key = KeyShortFor(ancestor,{{=field_unique_name}});{{/class_re_childgroup}}{{#class_re_child}}
        Key key = KeyLongFor(ancestor,{{=field_unique_name}});{{/class_re_child}}
        this.setKey(key);
    }{{/class_re_child_or_group}}
{{/field_hash_unique}}


    public void destroy(){
        this.inheritFrom = null;
        this.datastoreEntity = null;{{#pfield}}
        this.{{=field_name}} = null;{{/pfield}}{{#cfield}}
        {{=field_class}} {{=field_name}} = this.{{=field_name}};
        if (null != {{=field_name}}){
            this.{{=field_name}} = null;
            {{=field_name}}.destroy();
        }{{/cfield}}{{#class_re_child_or_group}}
        this.parent = null;{{/class_re_child_or_group}}
    }
    public final boolean hasInheritFrom(){
        return (null != this.inheritFrom || null != this.inheritFromKey);
    }
    public final boolean hasNotInheritFrom(){
        return (null == this.inheritFrom && null == this.inheritFromKey);
    }
    public final {{=class_name}} getInheritFrom(){
        {{=class_name}} inheritFrom = this.inheritFrom;
        if (null == inheritFrom){
            Key inheritFromKey = this.inheritFromKey;
            if (null != inheritFromKey){
                inheritFrom = {{=class_name}}.Get(inheritFromKey);
                this.inheritFrom = inheritFrom;
            }
        }
        return inheritFrom;
    }
    public final boolean setInheritFrom({{=class_name}} ancestor){
        if (IsNotEqual(this.inheritFrom,ancestor)){
            this.inheritFrom = ancestor;
            if (null != ancestor)
                this.inheritFromKey = ancestor.getKey();
            return true;
        }
        else
            return false;
    }
    public final boolean inheritFrom({{=class_name}} ancestor){
        if (IsNotEqual(this.inheritFrom,ancestor)){
            this.inheritFrom = ancestor;
            if (null != ancestor)
                this.inheritFromKey = ancestor.getKey();
            return true;
        }
        else
            return false;
    }{{!
}}{{#class_re_child_or_group}}
    public final boolean hasParentKey(){
        return (null != this.parentKey);
    }
    public final boolean hasNotParentKey(){
        return (null == this.parentKey);
    }
    public final Key getParentKey(){
        return this.parentKey;
    }
    public final boolean setParentKey(Key ancestor){
        if (IsNotEqual(this.parentKey,ancestor)){
            this.parentKey = ancestor;
            return true;
        }
        else
            return false;
    }
    public final boolean hasParent(){
        return (null != this.parent || null != this.parentKey);
    }
    public final boolean hasNotParent(){
        return (null == this.parent && null == this.parentKey);
    }
    public final {{=parent_class_name}} getParent(){
        {{=parent_class_name}} parent = this.parent;
        if (null == parent){
            Key parentKey = this.parentKey;
            if (null != parentKey){
                parent = {{=parent_class_name}}.Get(parentKey);
                this.parent = parent;
            }
        }
        return parent;
    }
    public final boolean setParent({{=parent_class_name}} ancestor){
        if (IsNotEqual(this.parent,ancestor)){
            this.parent = ancestor;
            if (null != ancestor)
                this.parentKey = ancestor.getKey();
            return true;
        }
        else
            return false;
    }
{{/class_re_child_or_group}}{{!
}}{{#pfield}}
    public final boolean has{{=field_nameCamel}}(boolean mayInherit){
        return (null != this.get{{=field_nameCamel}}(mayInherit));
    }
    public final boolean hasNot{{=field_nameCamel}}(boolean mayInherit){
        return (null == this.get{{=field_nameCamel}}(mayInherit));
    }
    public final boolean drop{{=field_nameCamel}}(){
        if (null != this.{{=field_name}}){
            this.{{=field_name}} = null;{{#field_is_bigTable}}
            this.{{=field_name}}Key = null;{{/field_is_bigTable}}
            return true;
        }
        else
            return false;
    }{{#field_is_not_inheritable}}
    public final {{=field_class}} get{{=field_nameCamel}}(){{{#field_is_not_bigTable}}
        return this.{{=field_name}};{{/field_is_not_bigTable}}{{#field_is_bigTable}}
        {{=field_class}} {{=field_name}} = this.{{=field_name}};
        if (null == {{=field_name}}){
            Key {{=field_name}}Key = this.{{=field_name}}Key;
            if (null != {{=field_name}}Key){
                {{=field_name}} = {{=field_class}}.Get({{=field_name}}Key);
                this.{{=field_name}} = {{=field_name}};
            }
        }
        return {{=field_name}};{{/field_is_bigTable}}
    }
    public final {{=field_class}} get{{=field_nameCamel}}(boolean mayInherit){
        return this.get{{=field_nameCamel}}();
    }{{/field_is_not_inheritable}}{{#field_is_inheritable}}
    public final {{=field_class}} get{{=field_nameCamel}}(){
        return this.get{{=field_nameCamel}}(MayInherit);
    }
    public final {{=field_class}} get{{=field_nameCamel}}(boolean mayInherit){{{#field_is_not_bigTable}}
        if (mayInherit){
            {{=field_class}} {{=field_name}} = this.{{=field_name}};
            if (null == {{=field_name}} && this.hasInheritFrom()){
                {{=class_name}} inheritFrom = this.getInheritFrom();
                return inheritFrom.get{{=field_nameCamel}}(MayInherit);
            }
            return {{=field_name}};
        }
        else
            return this.{{=field_name}};{{/field_is_not_bigTable}}{{#field_is_bigTable}}
        {{=field_class}} {{=field_name}} = this.{{=field_name}};
        if (null == {{=field_name}}){
            Key {{=field_name}}Key = this.{{=field_name}}Key;
            if (null == {{=field_name}}Key && mayInherit && this.hasInheritFrom()){
                {{=class_name}} inheritFrom = this.getInheritFrom();
                return inheritFrom.get{{=field_nameCamel}}(MayInherit);
            }
            else if (null != {{=field_name}}Key){
                {{=field_name}} = {{=field_class}}.Get({{=field_name}}Key);
                this.{{=field_name}} = {{=field_name}};
            }
        }
        return {{=field_name}};{{/field_is_bigTable}}
    }
    public final boolean set{{=field_nameCamel}}({{=field_class}} {{=field_name}}, boolean withInheritance){
        if (IsNotEqual(this.{{=field_name}},this.get{{=field_nameCamel}}(withInheritance))){
            this.{{=field_name}} = {{=field_name}};{{#field_is_bigTable}}
            if (null != {{=field_name}})
                this.{{=field_name}}Key = {{=field_name}}.getKey();
            else
                this.{{=field_name}}Key = null;{{/field_is_bigTable}}
            return true;
        }
        else
            return false;
    }{{/field_is_inheritable}}
    public final boolean set{{=field_nameCamel}}({{=field_class}} {{=field_name}}){
        if (IsNotEqual(this.{{=field_name}},{{=field_name}})){
            this.{{=field_name}} = {{=field_name}};{{#field_is_bigTable}}
            if (null != {{=field_name}})
                this.{{=field_name}}Key = {{=field_name}}.getKey();
            else
                this.{{=field_name}}Key = null;{{/field_is_bigTable}}
            return true;
        }
        else
            return false;
    }{{/pfield}}{{!
 }}{{#cfield}}
    public final boolean has{{=field_nameCamel}}(boolean mayInherit){
        return (this.get{{=field_nameCamel}}(mayInherit).isNotEmpty());
    }
    public final boolean hasNot{{=field_nameCamel}}(boolean mayInherit){
        return (this.get{{=field_nameCamel}}(mayInherit).isEmpty());
    }
    public final boolean drop{{=field_nameCamel}}(){
        {{=field_class}} {{=field_name}} = this.{{=field_name}};
        if (null != {{=field_name}}){
            this.{{=field_name}} = null;
            {{=field_name}}.destroy();
            return true;
        }
        else
            return false;
    }
    public final {{=field_class}} get{{=field_nameCamel}}(){
        return this.get{{=field_nameCamel}}(MayInherit);
    }
    public final {{=field_class}} get{{=field_nameCamel}}(boolean mayInherit){
        {{=field_class}} {{=field_name}} = this.{{=field_name}};
        if (null == {{=field_name}}){
            if (mayInherit && this.hasInheritFrom()){
                {{=class_name}} inheritFrom = this.getInheritFrom();
                if (null != inheritFrom){
                    {{=field_name}} = inheritFrom.get{{=field_nameCamel}}(MayInherit);
                    if (null != {{=field_name}})
                        return {{=field_name}};
                }
            }
            {{=field_name}} = new {{=field_impl_class_name}}(({{=class_name}})this);
            this.{{=field_name}} = {{=field_name}};
            {{=field_name}}.init();
        }
        return {{=field_name}};
    }
    public final void set{{=field_nameCamel}}({{=field_class}} {{=field_name}}){
        this.{{=field_name}} = {{=field_name}};
    }
    public final boolean isEmpty{{=field_nameCamel}}(){
        {{=field_class}} collection = this.{{=field_name}};
        if (null != collection)
            return collection.isEmpty();
        else
            return true;
    }
    public final boolean isNotEmpty{{=field_nameCamel}}(){
        {{=field_class}} collection = this.{{=field_name}};
        if (null != collection)
            return (!collection.isEmpty());
        else
            return false;
    }{{#field_is_list_long_or_short}}
    public final {{=field_list_component}} fetch{{=field_nameCamel}}(Filter filter){
        if (null != filter && KIND == filter.kind){
            {{=field_class}} collection = this.get{{=field_nameCamel}}(MayInherit);
            return collection.fetch(filter);
        }
        else
            throw new IllegalArgumentException();
    }{{/field_is_list_long_or_short}}{{#field_is_map_long_or_short}}
    public final {{=field_map_component_to}} fetch{{=field_nameCamel}}(Filter filter){
        if (null != filter && KIND == filter.kind){
            {{=field_class}} collection = this.get{{=field_nameCamel}}(MayInherit);
            return collection.fetch(filter);
        }
        else
            throw new IllegalArgumentException();
    }{{/field_is_map_long_or_short}}{{#field_is_list}}
    public final {{=field_list_component}} get{{=field_nameCamel}}(gap.data.ListFilter<{{=field_list_component}}> filter){
        if (null != filter){
            {{=field_class}} list = this.get{{=field_nameCamel}}(MayInherit);
            for ({{=field_list_component}} item : list){
                if (filter.accept(item))
                    return item;
            }
            return null;
        }
        else
            throw new IllegalArgumentException();
    }{{#field_list_component_named}}
    public final {{=field_list_component}} get{{=field_nameCamel}}ByName(String name){
        {{=field_class}} list = this.get{{=field_nameCamel}}(MayInherit);
        for ({{=field_list_component}} item : list){
            if (item.getName().equals(name))
                return item;
        }
        if (list.hitEnd()){
            Filter filter = new Filter("{{=field_list_component_kind}}").add({{=field_list_component}}.Field.For("name"),Filter.Op.eq,name);
            return list.fetch(filter);
        }
        return null;
    }{{/field_list_component_named}}{{/field_is_list}}{{#field_is_map}}
    public final {{=field_map_component_to}} get{{=field_nameCamel}}({{=field_map_component_from}} {{=field_name}}{{=field_map_component_from_nameCamel}}){
        if (null != {{=field_name}}{{=field_map_component_from_nameCamel}}){
            {{=field_class}} map = this.get{{=field_nameCamel}}(MayInherit);
            if (null != map){
                {{=field_map_component_to}} value = map.get({{=field_name}}{{=field_map_component_from_nameCamel}});
                if (null != value)
                    return value;
                else if (map.hitEnd()){
                    Filter filter = new Filter("{{=field_map_component_kind}}").add({{=field_map_component_to}}.Field.For("name"),Filter.Op.eq,name);
                    return map.fetch(filter);
                }
            }
            return null;
        }
        else
            throw new IllegalArgumentException();
    }{{/field_is_map}}{{/cfield}}{{!
}}{{#tfield}}
    public final boolean has{{=field_nameCamel}}(){
        return (null != this.{{=field_name}});
    }
    public final boolean hasNot{{=field_nameCamel}}(){
        return (null == this.{{=field_name}});
    }
    public final {{=field_class}} get{{=field_nameCamel}}(){
        return this.{{=field_name}};
    }
    public final void set{{=field_nameCamel}}({{=field_class}} {{=field_name}}){
        this.{{=field_name}} = {{=field_name}};
    }{{/tfield}}
    /*
     * Data binding supports
     */
    public final Kind getClassKind(){
        return KIND;
    }
    public final String getClassName(){
        return ClassName;
    }
    public final {{=field_unique_class}} getClassFieldUnique(){
        return "{{=field_unique_name}}";
    }
    public final List<gap.data.Field> getClassFields(){
        return (new gap.data.Field.List(Field.values()));
    }
    public final gap.data.Field getClassFieldByName(String name){
        return Field.getField(name);
    }
    public boolean updateFrom(Request req) throws ValidationError {
        boolean change = false;{{#pfield}}{{#field_is_primitive}}{{#field_is_not_unique}}{{#field_is_not_hash_unique}}
        String {{=field_name}}Request = req.getParameter("{{=field_name}}");
        try {
            {{=field_class}} {{=field_name}} = Strings.{{=field_class}}FromString({{=field_name}}Request);
            if (this.set{{=field_nameCamel}}({{=field_name}})){
                change = true;
            }
        }
        catch (RuntimeException exc){
            throw new ValidationError(ClassName,"{{=field_name}}",{{=field_name}}Request,exc);
        }{{/field_is_not_hash_unique}}{{/field_is_not_unique}}{{/field_is_primitive}}{{/pfield}}
        return change;
    }
    public final boolean updateFrom(BigTable proto){
        return this.updateFrom( ({{=class_name}})proto);
    }
    public final boolean updateFrom({{=class_name}} proto){
        boolean mayInherit = (!this.hasInheritFromKey());
        boolean change = false;{{#pfield}}{{#field_is_primitive}}{{#field_is_not_unique}}{{#field_is_not_hash_unique}}
        {{=field_class}} {{=field_name}} = proto.get{{=field_nameCamel}}(mayInherit);
        if (null != {{=field_name}} && this.set{{=field_nameCamel}}({{=field_name}})){
            change = true;
        }{{/field_is_not_hash_unique}}{{/field_is_not_unique}}{{/field_is_primitive}}{{/pfield}}
        return change;
    }
    public final gap.service.od.ClassDescriptor getClassDescriptorFor(){
        return ClassDescriptorFor(this.getClass());
    }{{#class_re_child_or_group}}
    public final gap.service.od.ClassDescriptor getClassDescriptorForParent(){
        return ClassDescriptorForParent();
    }{{/class_re_child_or_group}}
    /*
     * Template Data Dictionary
     */
    public boolean hasVariable(TemplateName name){
        Field field = Field.For(name.getComponent(0));
        if (null != field){
            switch (field){{{#pfield}}
            case {{=field_nameCamel}}:{{#field_is_bigTable}}
                if (name.has(1)){
                    {{=field_class}} {{=field_name}} = this.get{{=field_nameCamel}}(true);
                    if (null != {{=field_name}})
                        return {{=field_name}}.hasVariable(new TemplateName(name));
                    else
                        return false;
                }
                else
                    return this.has{{=field_nameCamel}}(true);{{/field_is_bigTable}}{{#field_is_not_bigTable}}
                if (name.has(1))
                    throw new IllegalStateException(field.name());
                else
                    return this.has{{=field_nameCamel}}(true);{{/field_is_not_bigTable}}{{/pfield}}
            default:
                throw new IllegalStateException(field.name());
            }
        }
        else {
            return super.hasVariable(name);
        }
    }
    public String getVariable(TemplateName name){
        Field field = Field.For(name.getComponent(0));
        if (null != field){
            switch (field){{{#pfield}}
            case {{=field_nameCamel}}:{{#field_is_bigTable}}
                if (name.has(1)){
                    {{=field_class}} {{=field_name}} = this.get{{=field_nameCamel}}(true);
                    if (null != {{=field_name}})
                        return {{=field_name}}.getVariable(new TemplateName(name));
                    else
                        return null;
                }
                else
                    return {{=field_to_string_prefix}}this.get{{=field_nameCamel}}(true){{=field_to_string_suffix}};{{/field_is_bigTable}}{{#field_is_not_bigTable}}
                if (name.has(1))
                    throw new IllegalStateException(field.name());
                else
                    return {{=field_to_string_prefix}}this.get{{=field_nameCamel}}(true){{=field_to_string_suffix}};{{/field_is_not_bigTable}}{{/pfield}}
            default:
                throw new IllegalStateException(field.name());
            }
        }
        else {
            return super.getVariable(name);
        }
    }
    public void setVariable(TemplateName name, String value){
        Field field = Field.For(name.getComponent(0));
        if (null != field){
            if (name.has(1)){
                switch (field){{{#pfield}}
                case {{=field_nameCamel}}:{{#field_is_bigTable}}

                    {{=field_class}} {{=field_name}} = this.get{{=field_nameCamel}}(true);
                    if (null != {{=field_name}})
                        {{=field_name}}.setVariable(new TemplateName(name),value);

                    return ;{{/field_is_bigTable}}{{#field_is_not_bigTable}}
                    throw new IllegalStateException(field.name());{{/field_is_not_bigTable}}{{/pfield}}
                default:
                    throw new IllegalStateException(field.name());
                }
            }
            else
                Field.Set(field,(({{=class_name}})this),value);
        }
        else {
            super.setVariable(name,value);
        }
    }
    public List<TemplateDataDictionary> getSection(TemplateName name){
        Field field = Field.For(name.getComponent(0));
        if (null != field){
            switch (field){{{#pfield}}
            case {{=field_nameCamel}}:{{#field_is_bigTable}}
                {{=field_class}} {{=field_name}} = this.get{{=field_nameCamel}}(true);
                if (null != {{=field_name}})
                    return {{=field_name}}.getSection(new TemplateName(name));
                else
                    return null;{{/field_is_bigTable}}{{#field_is_not_bigTable}}
                return null;{{/field_is_not_bigTable}}{{/pfield}}
            default:
                throw new IllegalStateException(field.name());
            }
        }
        else {
            return super.getSection(name);
        }
    }
}
