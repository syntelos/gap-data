
package {{=package_name}};
{{#import}}
import {{=import_spec}};{{/import}}

import gap.data.*;
import gap.service.Templates;

import hapax.TemplateDictionary;

import com.google.appengine.api.datastore.*;

import java.io.Serializable;
import javax.annotation.Generated;

/**
 * Data bean generated from "{{=odl_gen_odl_src}}".
 */
@Generated(value={"{{=odl_gen_class}}","{{=odl_gen_xtm_src}}"},date="{{=odl_gen_timestamp}}",comments="{{=odl_gen_odl_src}}")
public final class ListShort{{=parent_class_name}}{{=child_class_name}}
    extends gap.util.AbstractList<{{=child_class_name}}>
    implements gap.data.List.Short<{{=child_class_name}}>
{

    private final static long serialVersionUID = {{=parent_class_version}};

    public final static AncestorKeyFieldName = "{{=parent_keyfield_name}}";


    protected transient {{=parent_class_name}} parent;


    public ListShort{{=parent_class_name}}{{=child_class_name}}({{=parent_class_name}} parent) {
        super();
        if (null != parent){
            this.parent = parent;
            this.ancestorKeyFieldName = ListShort{{=parent_class_name}}{{=child_class_name}}.AncestorKeyFieldName;
            this.setValueClassAncestorKey();
        }
        else
            throw new IllegalArgumentException();
    }
    public ListShort(){
        super();
    }


    public void destroy(){
        this.parent = null;
        this.clearBuffer();
    }
    public {{=parent_class_name}} getParent(){
        {{=parent_class_name}} parent = this.parent;
        if (null == parent){
            Key parentKey = this.ancestorKey;
            if (null != parentKey){
                parent = {{=parent_class_name}}.Get(parentKey);
                if (null != parent)
                    this.parent = parent;
                else
                    throw new IllegalStateException("Missing parent, user employed wrong constructor (pre store).");
            }
            else
                throw new IllegalStateException("Missing ancestor key.");
        }
        return parent;
    }
    public void setValueClassAncestorKey(){
        Key key = this.getParent().getClassFieldKeyValue();
        if (key != this.ancestorKey){
            this.ancestorKey = key;
            this.query = {{=parent_class_name}}.CreateQueryFor(this.ancestorKey);
        }
    }
}
