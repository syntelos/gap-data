/*
 * Gap Data
 * Copyright (C) 2009 John Pritchard
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 * 02110-1301 USA.
 */
package {{=package_name}}.servlet;

{{#import}}import {{=import_spec}};
{{/import}}
import {{=package_name}}.*;

import gap.*;
import gap.data.* ;
import gap.service.* ;
import gap.util.* ;

import hapax.TemplateDictionary;
import hapax.TemplateException;

import com.google.appengine.api.datastore.*;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import java.io.IOException;

import java.util.Date;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.LogRecord;

import javax.annotation.Generated;

/**
 * Generated data bean service methods.
 */
@Generated(value={"{{=odl_gen_class}}","{{=odl_gen_xtm_src}}"},date="{{=odl_gen_timestamp}}")
public class {{=class_name}}
    extends gap.servlet.Site
{
    public final static Class<{{=package_name}}.{{=class_name}}> BigTableClass = {{=package_name}}.{{=class_name}}.class;


    public {{=class_name}}(){
        super();
    }


    protected Parameters createParameters(Request req){
        return new Parameters(req,20,BigTableClass);
    }
    protected TemplateDictionary doGetDefine(Request req, Response rep){

        TemplateDictionary top = req.getTop();

{{#class_re_not_child_or_group}}
        if (req.hasPath(1)){

            {{=package_name}}.{{=class_name}} instance = {{=package_name}}.{{=class_name}}.ForLong{{=field_unique_nameCamel}}(req.getPath(1));

            if (null != instance){

                instance.dictionaryInto(top);

                return top;
            }
        }{{/class_re_not_child_or_group}}{{#class_re_child}}
        if (req.hasPath(1) && req.hasPath(2)){

            Key parentKey = {{=package_name}}.{{=parent_class_name}}.KeyLongFor(req.getPath(1));

            {{=package_name}}.{{=class_name}} instance = {{=package_name}}.{{=class_name}}.ForLong{{=field_unique_nameCamel}}(parentKey,req.getPath(2));

            if (null != instance){

                instance.dictionaryInto(top);

                return top;
            }
        }{{/class_re_child}}{{#class_re_childgroup}}
        if (req.hasPath(1) && req.hasPath(2)){

            Key parentKey = {{=package_name}}.{{=parent_class_name}}.KeyLongFor(req.getPath(1));

            {{=package_name}}.{{=class_name}} instance = {{=package_name}}.{{=class_name}}.ForShort{{=field_unique_nameCamel}}(parentKey,req.getPath(2));

            if (null != instance){

                instance.dictionaryInto(top);

                return top;
            }
        }{{/class_re_childgroup}}{{!
}}{{#class_re_not_childgroup}}
        else {
            req.parameters.dictionaryInto(top);

            com.google.appengine.api.datastore.Query query = {{=package_name}}.{{=class_name}}.CreateQueryFor();

            BigTableIterator<{{=package_name}}.{{=class_name}}> list = (BigTableIterator<{{=package_name}}.{{=class_name}}>){{=package_name}}.{{=class_name}}.QueryN(query,req.parameters.page);

            for ({{=package_name}}.{{=class_name}} instance : list){

                instance.dictionaryInto(top);
            }
            return top;
        }{{/class_re_not_childgroup}}{{#class_re_childgroup}}
        else if (req.hasPath(1)){
            req.parameters.dictionaryInto(top);

            Key parentKey = {{=package_name}}.{{=parent_class_name}}.KeyLongFor(req.getPath(1));

            com.google.appengine.api.datastore.Query query = {{=package_name}}.{{=class_name}}.CreateQueryFor(parentKey);

            BigTableIterator<{{=package_name}}.{{=class_name}}> list = (BigTableIterator<{{=package_name}}.{{=class_name}}>){{=package_name}}.{{=class_name}}.QueryN(query,req.parameters.page);

            for ({{=package_name}}.{{=class_name}} instance : list){

                instance.dictionaryInto(top);
            }
            return top;
        }{{/class_re_childgroup}}
        return null;
    }

}
