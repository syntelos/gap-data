
package {{=package_name}}.servlet;

{{#import}}import {{=import_spec}};
{{/import}}
import {{=package_name}}.*;

import gap.Request;
import gap.Response;
import gap.data.* ;

import gap.service.Accept;
import gap.service.Error;
import gap.service.Logon;
import gap.service.Path;
import gap.service.Parameters;
import gap.service.Templates;

import hapax.TemplateDictionary;
import hapax.TemplateException;

import com.google.appengine.api.datastore.*;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import java.io.IOException;

import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.LogRecord;

import javax.annotation.Generated;

/**
 * Data binding methods.
 */
@Generated(value={"{{=odl_gen_class}}","{{=odl_gen_xtm_src}}"},date="{{=odl_gen_timestamp}}",comments="{{=odl_gen_odl_src}}")
public class {{=class_name}}
    extends gap.servlet.Site
{
    public final static Class<? extends BigTable> BigTableClass = {{=package_name}}.{{=class_name}}.class;


    public {{=class_name}}(){
        super();
    }


    protected Parameters createParameters(Request req){
        return new Parameters(req,20,BigTableClass);
    }
    protected TemplateDictionary doGetDefine(Request req, Response rep){

        TemplateDictionary top = req.getTop();

        if (this.canRead(req)){

            String id = req.getPath(0);
            if (null != id){

                {{=package_name}}.{{=class_name}} instance = {{=package_name}}.{{=class_name}}.ForLong{{=field_unique_nameCamel}}(id);

                if (null != instance){

                    instance.dictionaryInto(top);

                    return top;
                }
                else {
                    return null;
                }
            }
            else {
                req.parameters.dictionaryInto(top);

                com.google.appengine.api.datastore.Query query = {{=package_name}}.{{=class_name}}.CreateQueryFor();

                com.google.appengine.api.datastore.FetchOptions page = req.parameters.page.createFetchOptions();

                List<{{=package_name}}.{{=class_name}}> list = (List<{{=package_name}}.{{=class_name}}>){{=package_name}}.{{=class_name}}.QueryN(query,page);

                for ({{=package_name}}.{{=class_name}} instance : list){

                    instance.dictionaryInto(top);
                }
            }
        }
        return top;
    }

}
