
Requires

   Java 1.6
   Ant 1.6.5


Introduction

   Gap Data is application framework for the Google App Engine.

   The Google App Engine APIs are well designed, but are not ideal for
   direct application programming.  Application programming is most
   expressive, effective and reliable when it can employ simple and
   reliable functions for common tasks.  

   Gap Data is designed to fulfill this role with a fairly
   conventional memcache/datastore Data Bean architecture for a
   reasonable compromise between performance and reliability.

   Gap Data generates Java Bean data bindings for schematic elements
   defined in its Object Definition Language (ODL).

   Data bean classes employ primitive, object, list and map relations
   to define simple and complex data bean classes.

   Instances of data bean classes are stored and retrieved via static
   functions defined for each class according to the natural identity
   of the class.

   List and map relations provide a simple and effective lazy cache
   intended for programming within the singular request- response
   cycle.


Quick Start 

   * Make a copy of this directory and its contents,

   * Optionally import the copy into a versioning repository like
     Google Code (see The Bootstrap Problem, below),

   * Run 'ant' to build,

   * Edit 'project.application' with the name of an appengine
   application,

   * Create or modify files under 'odl' to generate persistent data
   beans by running 'ant odl' (after 'ant' build), rebuild by running
   'ant' again,

   * Edit files under 'web' (and 'ver') for static HTML and templates,

   * and Edit java source files for generated bean and servlet user
     code for site programming.

   * Use 'appengine-java-sdk/VER/bin/appcfg' according to Google's App
     Engine Documentation to upload the current version.

   * Use 'ant' commands provided for application versioning, and more.


Recommended Application Architecture

   Ideally, Gap Data applications are constructed in a combination of
   static html from files and dynamic html generated server side by
   the integrated hapax templates.  

   Gap Data is designed to produce any data format for the clients of
   its applications, and delivers solutions for HTML, XML and JSON.

   As client side dynamic (AJAX) elements are resricted to login-
   protected areas, then web crawlers (search engines) see the site as
   its users do.


The Bootstrap Problem

   Gap Data generates code into its codebase by using its compiled
   codebase.  

   When generated java source code fails to compile, and the class
   file binaries in the web archive directory are deleted or
   incomplete, then the codebase will be in a deadlocked state.

   There are a couple of ways to enter into this state where generated
   java source code fails to compile and cannot be regenerated.  

   This codebase deadlock state is entered through edits to the ODL or
   Java XTM Template files, and subsequently deleting the web archive
   ('war') directory.

   In ODL, employing classes not properly supported in the Java XTM
   Template.  In the Java XTM Template, emitting code that fails to
   compile.

   In a deadlocked codebase, generated java source files can be
   reverted, edited, or deleted in order to compile the codebase and
   continue development.

   Another solution would be to use another Gap-Data codebase to
   generate code for the deadlocked codebase.

   Using a versioning repository for the Gap Data application, always
   arrange the work flow to commit a good build immediately before the
   next run of 'ant odl'.


For more info

   * Architecture.txt 

   * TODO.txt 

   * http://code.google.com/p/gap-data 

   * http://groups.google.com/group/gap-data

   * http://code.google.com/appengine/docs/java/overview.html

