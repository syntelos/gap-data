
package {{=package_name}};
{{#import}}
import {{=import_spec}};{{/import}}

import gap.*;
import gap.data.*;
import gap.util.*;

import hapax.TemplateDictionary;

import com.google.appengine.api.datastore.*;

import java.io.Serializable;
import javax.annotation.Generated;

/**
 * Data bean generated from "{{=odl_gen_odl_src}}".
 */
@Generated(value={"{{=odl_gen_class}}","{{=odl_gen_xtm_src}}"},date="{{=odl_gen_timestamp}}",comments="{{=odl_gen_odl_src}}")
public final class {{=class_name}}
    extends gap.data.BigTable
    implements DataInheritance<{{=class_name}}>{{#implements}}{{#implements_it_First}},{{/implements_it_First}}
               {{=interface_class}}{{#implements_it_NotLast}},{{/implements_it_NotLast}}{{/implements}}
{

    private final static long serialVersionUID = {{=class_version}};

    public final static String KIND = "{{=class_kind}}";

    public final static String ClassName = "{{=class_name}}";

    public final static String DefaultSortBy = "{{=class_defaultSortBy}}";

    public final static gap.service.od.ClassDescriptor ClassDescriptorFor(){
        return ClassDescriptorFor({{=class_name}}.class);
    }{{#class_re_child_or_group}}
    public final static gap.service.od.ClassDescriptor ClassDescriptorForParent(){
        return ClassDescriptorFor({{=parent_class_name}}.class);
    }{{/class_re_child_or_group}}

    static {
        Register({{=class_name}}.class);
    }
{{#field_hash_unique}}

{{#class_re_not_child_or_group}}
    public final static Key KeyLong{{=field_unique_nameCamel}}For({{#field}}{{#field_it_NotFirst}}, {{/field_it_NotFirst}}{{=field_class}} {{=field_name}}{{/field}}){
        String id = {{=field_unique_nameCamel}}For({{#field}}{{#field_it_NotFirst}}, {{/field_it_NotFirst}} {{=field_name}}{{/field}});
        return KeyLongFor(id);
    }{{/class_re_not_child_or_group}}{{#class_re_child}}
    public final static Key KeyLong{{=field_unique_nameCamel}}For(Key ancestor, {{#field}}{{#field_it_NotFirst}}, {{/field_it_NotFirst}}{{=field_class}} {{=field_name}}{{/field}}){
        String id = {{=field_unique_nameCamel}}For(ancestor,{{#field}}{{#field_it_NotFirst}}, {{/field_it_NotFirst}} {{=field_name}}{{/field}});
        return KeyLongFor(ancestor,id);
    }{{/class_re_child}}{{#class_re_childgroup}}
    public final static Key KeyShort{{=field_unique_nameCamel}}For(Key ancestor, {{#field}}{{#field_it_NotFirst}}, {{/field_it_NotFirst}}{{=field_class}} {{=field_name}}{{/field}}){
        String id = {{=field_unique_nameCamel}}For(ancestor,{{#field}}{{#field_it_NotFirst}}, {{/field_it_NotFirst}} {{=field_name}}{{/field}});
        return KeyShortFor(ancestor,id);
    }{{/class_re_childgroup}}

{{#class_re_not_child_or_group}}
    public final static String {{=field_unique_nameCamel}}For({{#field}}{{#field_it_NotFirst}}, {{/field_it_NotFirst}}{{=field_class}} {{=field_name}}{{/field}}){
        if ({{#field}}{{#field_it_NotFirst}} && {{/field_it_NotFirst}}null != {{=field_name}}{{/field}}){{{#field}}
            String {{=field_name}}String = {{=field_to_string_prefix}}{{=field_name}}{{=field_to_string_suffix}};{{/field}}
            return gap.data.Hash.For({{#field}}{{#field_it_NotFirst}}+'/'+{{/field_it_NotFirst}}{{=field_name}}String{{/field}});
        }
        else
            throw new IllegalArgumentException();
    }{{/class_re_not_child_or_group}}{{#class_re_child_or_group}}
    public final static String {{=field_unique_nameCamel}}For(Key ancestor, {{#field}}{{#field_it_NotFirst}}, {{/field_it_NotFirst}}{{=field_class}} {{=field_name}}{{/field}}){
        if (ancestor.isComplete() && {{#field}}{{#field_it_NotFirst}} && {{/field_it_NotFirst}}null != {{=field_name}}{{/field}}){{{#field}}
            String {{=field_name}}String = {{=field_to_string_prefix}}{{=field_name}}{{=field_to_string_suffix}};{{/field}}
            return gap.data.Hash.For(ToString(ancestor)+'/'+{{#field}}{{#field_it_NotFirst}}+'/'+{{/field_it_NotFirst}}{{=field_name}}String{{/field}});
        }
        else
            throw new IllegalArgumentException();
    }{{/class_re_child_or_group}}

{{#class_re_not_child_or_group}}
    public final static {{=class_name}} ForLong{{#field}}{{=field_nameCamel}}{{/field}}({{#field}}{{#field_it_NotFirst}}, {{/field_it_NotFirst}}{{=field_class}} {{=field_name}}{{/field}}){
        if ({{#field}}{{#field_it_NotFirst}} && {{/field_it_NotFirst}}null != {{=field_name}}{{/field}}){
            Key key = KeyLong{{=field_unique_nameCamel}}For({{#field}}{{#field_it_NotFirst}},{{/field_it_NotFirst}} {{=field_name}}{{/field}});
            {{=class_name}} instance = ({{=class_name}})gap.data.Store.Get(key);
            if (null != instance)
                return instance;
            else {
                Query q = CreateQueryFor(key);
                return ({{=class_name}})gap.data.Store.Query1(q);
            }
        }
        else
            throw new IllegalArgumentException();
    }{{/class_re_not_child_or_group}}{{#class_re_child}}
    public final static {{=class_name}} ForLong{{#field}}{{=field_nameCamel}}{{/field}}(Key ancestor, {{#field}}{{#field_it_NotFirst}}, {{/field_it_NotFirst}}{{=field_class}} {{=field_name}}{{/field}}){
        if ({{#field}}{{#field_it_NotFirst}} && {{/field_it_NotFirst}}null != {{=field_name}}{{/field}}){
            Key key = KeyLong{{=field_unique_nameCamel}}For(ancestor,{{#field}}{{#field_it_NotFirst}},{{/field_it_NotFirst}} {{=field_name}}{{/field}});
            {{=class_name}} instance = ({{=class_name}})gap.data.Store.Get(key);
            if (null != instance)
                return instance;
            else {
                Query q = CreateQueryFor(key);
                return ({{=class_name}})gap.data.Store.Query1(q);
            }
        }
        else
            throw new IllegalArgumentException();
    }{{/class_re_child}}{{#class_re_childgroup}}
    public final static {{=class_name}} ForShort{{#field}}{{=field_nameCamel}}{{/field}}(Key ancestor, {{#field}}{{#field_it_NotFirst}}, {{/field_it_NotFirst}}{{=field_class}} {{=field_name}}{{/field}}){
        if ({{#field}}{{#field_it_NotFirst}} && {{/field_it_NotFirst}}null != {{=field_name}}{{/field}}){
            Key key = KeyShort{{=field_unique_nameCamel}}For(ancestor,{{#field}}{{#field_it_NotFirst}},{{/field_it_NotFirst}} {{=field_name}}{{/field}});
            {{=class_name}} instance = ({{=class_name}})gap.data.Store.Get(key);
            if (null != instance)
                return instance;
            else {
                Query q = CreateQueryFor(key);
                return ({{=class_name}})gap.data.Store.Query1(q);
            }
        }
        else
            throw new IllegalArgumentException();
    }{{/class_re_childgroup}}

{{#class_re_not_child_or_group}}
    public final static {{=class_name}} GetCreateLong({{#field}}{{#field_it_NotFirst}}, {{/field_it_NotFirst}}{{=field_class}} {{=field_name}}{{/field}}){
        {{=class_name}} {{=class_nameDecamel}} = ForLong{{#field}}{{=field_nameCamel}}{{/field}}({{#field}}{{#field_it_NotFirst}},{{/field_it_NotFirst}} {{=field_name}}{{/field}});
        if (null == {{=class_nameDecamel}}){
            {{=class_nameDecamel}} = new {{=class_name}}({{#field}}{{#field_it_NotFirst}},{{/field_it_NotFirst}} {{=field_name}}{{/field}});
            {{=class_nameDecamel}} = ({{=class_name}})gap.data.Store.Put({{=class_nameDecamel}});
        }
        return {{=class_nameDecamel}};
    }{{/class_re_not_child_or_group}}{{#class_re_child}}
    public final static {{=class_name}} GetCreateLong(Key ancestor, {{#field}}{{#field_it_NotFirst}}, {{/field_it_NotFirst}}{{=field_class}} {{=field_name}}{{/field}}){
        {{=class_name}} {{=class_nameDecamel}} = ForLong{{#field}}{{=field_nameCamel}}{{/field}}(ancestor,{{#field}}{{#field_it_NotFirst}},{{/field_it_NotFirst}} {{=field_name}}{{/field}});
        if (null == {{=class_nameDecamel}}){
            {{=class_nameDecamel}} = new {{=class_name}}(ancestor,{{#field}}{{#field_it_NotFirst}},{{/field_it_NotFirst}} {{=field_name}}{{/field}});
            {{=class_nameDecamel}} = ({{=class_name}})gap.data.Store.Put({{=class_nameDecamel}});
        }
        return {{=class_nameDecamel}};
    }{{/class_re_child}}{{#class_re_childgroup}}
    public final static {{=class_name}} GetCreateShort(Key ancestor, {{#field}}{{#field_it_NotFirst}}, {{/field_it_NotFirst}}{{=field_class}} {{=field_name}}{{/field}}){
        {{=class_name}} {{=class_nameDecamel}} = ForShort{{#field}}{{=field_nameCamel}}{{/field}}(ancestor,{{#field}}{{#field_it_NotFirst}},{{/field_it_NotFirst}} {{=field_name}}{{/field}});
        if (null == {{=class_nameDecamel}}){
            {{=class_nameDecamel}} = new {{=class_name}}(ancestor,{{#field}}{{#field_it_NotFirst}},{{/field_it_NotFirst}} {{=field_name}}{{/field}});
            {{=class_nameDecamel}} = ({{=class_name}})gap.data.Store.Put({{=class_nameDecamel}});
        }
        return {{=class_nameDecamel}};
    }{{/class_re_childgroup}}
{{/field_hash_unique}}
{{#field_unique}}
{{#class_re_not_child_or_group}}
    public final static Key KeyLongFor(String {{=field_name}}){
        return KeyFactory.createKey(KIND,id);
    }{{/class_re_not_child_or_group}}{{#class_re_childgroup}}
    public final static Key KeyShortFor(Key ancestor, String {{=field_name}}){
        return KeyFactory.createKey(ancestor,KIND,id);
    }{{/class_re_childgroup}}{{#class_re_child}}
    public final static Key KeyLongFor(Key ancestor, String {{=field_name}}){
        return KeyFactory.createKey(KIND,id);
    }{{/class_re_child}}

{{#class_re_not_child_or_group}}
    public final static {{=class_name}} ForLong{{=field_nameCamel}}(String {{=field_name}}){
        if (null != {{=field_name}}){
            Key key = KeyLongFor({{=field_name}});
            {{=class_name}} instance = ({{=class_name}})gap.data.Store.Get(key);
            if (null != instance)
                return instance;
            else {
                Query q = CreateQueryFor(key);
                return ({{=class_name}})gap.data.Store.Query1(q);
            }
        }
        else
            throw new IllegalArgumentException();
    }{{/class_re_not_child_or_group}}{{#class_re_child}}
    public final static {{=class_name}} ForLong{{=field_nameCamel}}(Key ancestor, String {{=field_name}}){
        if (null != ancestor && ancestor.isComplete() && null != {{=field_name}}){
            Key key = KeyLongFor(ancestor,{{=field_name}});
            {{=class_name}} instance = ({{=class_name}})gap.data.Store.Get(key);
            if (null != instance)
                return instance;
            else {
                Query q = CreateQueryFor(key);
                return ({{=class_name}})gap.data.Store.Query1(q);
            }
        }
        else
            throw new IllegalArgumentException();
    }{{/class_re_child}}{{#class_re_childgroup}}
    public final static {{=class_name}} ForShort{{=field_nameCamel}}(Key ancestor, String {{=field_name}}){
        if (null != ancestor && ancestor.isComplete() && null != {{=field_name}}){
            Key key = KeyShortFor(ancestor,{{=field_name}});
            {{=class_name}} instance = ({{=class_name}})gap.data.Store.Get(key);
            if (null != instance)
                return instance;
            else {
                Query q = CreateQueryFor(key);
                return ({{=class_name}})gap.data.Store.Query1(q);
            }
        }
        else
            throw new IllegalArgumentException();
    }{{/class_re_childgroup}}
{{/field_unique}}

    public final static {{=class_name}} Get(Key key){
        if (null != key){
            {{=class_name}} instance = ({{=class_name}})gap.data.Store.Get(key);
            if (null != instance)
                return instance;
            else {
                Query q = CreateQueryFor(key);
                return ({{=class_name}})gap.data.Store.Query1(q);
            }
        }
        else
            throw new IllegalArgumentException();
    }
    public final static Key GetKey(Key key){
        if (null != key){
            Query q = CreateQueryFor(key);
            return gap.data.Store.QueryKey1(q);
        }
        else
            throw new IllegalArgumentException();
    }

{{#class_re_child}}
    /**
     * Test for uniqueness and iterate under collisions.
     */
    public final static Key NewRandomKeyLong(Key ancestor){
        if (null != ancestor){
            /*
             * Source matter for data local uniqueness
             */
            String source = gap.data.BigTable.ToString(ancestor);
            long matter = gap.data.Hash.Djb64(source);
            /*
             * Random matter for network global uniqueness
             */
            java.util.Random random = new java.util.Random();
            do {
                matter ^= random.nextLong();
                String idString = gap.data.Hash.Hex(matter);
                Key key = KeyFactory.createKey(KIND,idString);
                if (null == GetKey(key))
                    return key;
            }
            while (true);
        }
        else
            throw new IllegalArgumentException();
    }{{/class_re_child}}{{#class_re_childgroup}}
    /**
     * Test for uniqueness and iterate under collisions.
     */
    public final static Key NewRandomKeyShort(Key ancestor){
        if (null != ancestor){
            /*
             * Source matter for data local uniqueness
             */
            String source = gap.data.BigTable.ToString(ancestor);
            long matter = gap.data.Hash.Djb64(source);
            /*
             * Random matter for network global uniqueness
             */
            java.util.Random random = new java.util.Random();
            do {
                matter ^= random.nextLong();
                String idString = gap.data.Hash.Hex(matter);
                Key key = KeyFactory.createKey(ancestor,KIND,idString);
                if (null == GetKey(key))
                    return key;
            }
            while (true);
        }
        else
            throw new IllegalArgumentException();
    }{{/class_re_childgroup}}

    /**
     * Drop the instance and any children of its key from the world,
     * memcache and store.
     */
    public final static void Delete({{=class_name}} instance){
        if (null != instance){
            Key key = instance.get{{=field_key_nameCamel}}();
            gap.data.Store.DeleteCollection(new Query(key));
            gap.data.Store.Delete(key);
        }
    }
    /**
     * Drop the instance from memcache, exclusively.
     */
    public final static void Clean({{=class_name}} instance){
        if (null != instance){
            Key key = instance.get{{=field_key_nameCamel}}();
            gap.data.Store.Clean(key);
        }
    }
    /**
     * Store the instance.
     */
    public final static void Save({{=class_name}} instance){
        if (null != instance){
            gap.data.Store.Put(instance);
        }
    }
    /**
     * Write the instance to store.
     */
    public final static void Store({{=class_name}} instance){
        if (null != instance){
            gap.data.Store.Put(instance);
        }
    }
    public final static Query CreateQueryFor(){
        return new Query(KIND);
    }
    public final static Query CreateQueryFor(Key key){
        return new Query(KIND,key);
    }
    public final static {{=class_name}} Query1(Query query){
        if (null != query)
            return ({{=class_name}})gap.data.Store.Query1(query);
        else
            throw new IllegalArgumentException();
    }
    public final static List QueryN(Query query, FetchOptions page){
        if (null != query)
            return gap.data.Store.QueryN(query,page);
        else
            throw new IllegalArgumentException();
    }
    public final static Key QueryKey1(Query query){
        if (null != query)
            return gap.data.Store.QueryKey1(query);
        else
            throw new IllegalArgumentException();
    }
    public final static List<Key> QueryKeyN(Query query, FetchOptions page){
        if (null != query)
            return gap.data.Store.QueryKeyN(query,page);
        else
            throw new IllegalArgumentException();
    }

    /**
     * Persistent fields' binding for {@link {{=class_name}}}
     */
    public static enum Field
        implements gap.data.Field
    {
        InheritFromKey("inheritFromKey"),{{#class_re_child_or_group}}
        ParentKey("parentKey"),{{/class_re_child_or_group}}{{#pfield}}
        {{=field_nameCamel}}("{{=field_name}}"){{#pfield_it_NotLast}},{{/pfield_it_NotLast}}{{#pfield_it_Last}};{{/pfield_it_Last}}{{/pfield}}


        private final static java.util.Map<String,Field> FieldName = new java.util.HashMap<String,Field>();
        public static final String[] AllNames;
        static {
            Field[] allFields = Field.values();
            int count = allFields.length;
            String[] names = new String[count];
            for (int cc = 0; cc < count; cc++) {
                Field field = allFields[cc];
                String fieldName = field.getFieldName();
                names[cc] = fieldName;
                FieldName.put(fieldName,field);
            }
            AllNames = names;
        }
        public static Field getField(String name) {
            return FieldName.get(name);
        }
        public static Object Get(Field field, {{=class_name}} instance, boolean mayInherit){
            switch(field){
            case InheritFromKey:
                return instance.getInheritFromKey();{{#class_re_child_or_group}}
            case ParentKey:
                return instance.getParentKey();{{/class_re_child_or_group}}{{#pfield}}
            case {{=field_nameCamel}}:
                return instance.get{{=field_nameCamel}}(mayInherit);{{/pfield}}
            default:
                throw new IllegalArgumentException(field.toString()+" in {{=class_name}}");
            }
        }
        public static boolean Set(Field field, {{=class_name}} instance, Object value){
            switch(field){
            case InheritFromKey:
                return instance.setInheritFromKey( (Key)value);{{#class_re_child_or_group}}
            case ParentKey:
                return instance.setParentKey( (Key)value);{{/class_re_child_or_group}}{{#pfield}}
            case {{=field_nameCamel}}:
                return instance.set{{=field_nameCamel}}( ({{=field_class}})value);{{/pfield}}
            default:
                throw new IllegalArgumentException(field.toString()+" in {{=class_name}}");
            }
        }


        private final String fieldName;


        Field(String fieldName){
            this.fieldName = fieldName;
        }


        public String getFieldName(){
            return this.fieldName;
        }
        public String toString(){
            return this.fieldName;
        }
    }

    private volatile transient {{=class_name}} inheritFrom;

{{#pfield}}
    private volatile {{=field_class}} {{=field_name}};    {{#field_is_unique}}// {{=data_model}}{{/field_is_unique}}{{#field_is_hash_unique}}// {{=data_model}}{{/field_is_hash_unique}}{{/pfield}}

{{#cfield}}
    private volatile {{=field_class}} {{=field_name}};{{/cfield}}

{{#tfield}}
    private volatile transient {{=field_class}} {{=field_name}};    {{#field_is_transient}}// {{=data_model}}{{/field_is_transient}}{{/tfield}}

{{#class_re_child_or_group}}
    private volatile Key parentKey;
    private volatile transient {{=parent_class_name}} parent;{{/class_re_child_or_group}}


    public {{=class_name}}() {
        super();
    }{{#field_hash_unique}}{{#class_re_not_child_or_group}}
    public {{=class_name}}({{#field}}{{#field_it_NotFirst}}, {{/field_it_NotFirst}}{{=field_class}} {{=field_name}}{{/field}}) {
        super();{{#field}}
        this.set{{=field_nameCamel}}({{=field_name}});{{/field}}
        String {{=field_unique_name}} = {{=field_unique_nameCamel}}For({{#field}}{{#field_it_NotFirst}},{{/field_it_NotFirst}} {{=field_name}}{{/field}});
        this.set{{=field_unique_nameCamel}}({{=field_unique_name}});
        Key key = KeyLongFor({{=field_unique_name}});
        this.set{{=field_key_nameCamel}}(key);
    }{{/class_re_not_child_or_group}}{{#class_re_child_or_group}}
    public {{=class_name}}(Key ancestor, {{#field}}{{#field_it_NotFirst}}, {{/field_it_NotFirst}}{{=field_class}} {{=field_name}}{{/field}}) {
        super();{{#field}}
        this.set{{=field_nameCamel}}({{=field_name}});{{/field}}
        this.parentKey = ancestor;
        String {{=field_unique_name}} = {{=field_unique_nameCamel}}For(ancestor, {{#field}}{{#field_it_NotFirst}},{{/field_it_NotFirst}} {{=field_name}}{{/field}});
        this.set{{=field_unique_nameCamel}}({{=field_unique_name}});{{#class_re_childgroup}}
        Key key = KeyShortFor(ancestor,{{=field_unique_name}});{{/class_re_childgroup}}{{#class_re_child}}
        Key key = KeyLongFor(ancestor,{{=field_unique_name}});{{/class_re_child}}
        this.set{{=field_key_nameCamel}}(key);
    }{{/class_re_child_or_group}}
{{/field_hash_unique}}


    public void onread(){
{{#method_onread_with_body}}{{=body}}{{/method_onread_with_body}}
    }
    public void onwrite(){
{{#method_onwrite_with_body}}{{=body}}{{/method_onwrite_with_body}}
    }
    public void destroy(){
        this.datastoreEntity = null;{{#pfield}}
        this.{{=field_name}} = null;{{/pfield}}{{#cfield}}
        {{=field_class}} {{=field_name}} = this.{{=field_name}};
        if (null != {{=field_name}}){
            this.{{=field_name}} = null;
            {{=field_name}}.destroy();
        }{{/cfield}}{{#class_re_child_or_group}}
        this.parent = null;{{/class_re_child_or_group}}
    }
    public boolean hasInheritFrom(){
        return (null != this.inheritFrom || null != this.inheritFromKey);
    }
    public boolean hasNotInheritFrom(){
        return (null == this.inheritFrom && null == this.inheritFromKey);
    }
    public {{=class_name}} getInheritFrom(){
        {{=class_name}} inheritFrom = this.inheritFrom;
        if (null == inheritFrom){
            Key inheritFromKey = this.inheritFromKey;
            if (null != inheritFromKey){
                inheritFrom = {{=class_name}}.Get(inheritFromKey);
                this.inheritFrom = inheritFrom;
            }
        }
        return inheritFrom;
    }
    public boolean setInheritFrom({{=class_name}} ancestor){
        if (IsNotEqual(this.inheritFrom,ancestor)){
            this.inheritFrom = ancestor;
            if (null != ancestor)
                this.inheritFromKey = ancestor.get{{=field_key_nameCamel}}();
            return true;
        }
        else
            return false;
    }
{{#class_re_child_or_group}}
    public boolean hasParentKey(){
        return (null != this.parentKey);
    }
    public boolean hasNotParentKey(){
        return (null == this.parentKey);
    }
    public Key getParentKey(){
        return this.parentKey;
    }
    public boolean setParentKey(Key ancestor){
        if (IsNotEqual(this.parentKey,ancestor)){
            this.parentKey = ancestor;
            return true;
        }
        else
            return false;
    }
    public boolean hasParent(){
        return (null != this.parent || null != this.parentKey);
    }
    public boolean hasNotParent(){
        return (null == this.parent && null == this.parentKey);
    }
    public {{=parent_class_name}} getParent(){
        {{=parent_class_name}} parent = this.parent;
        if (null == parent){
            Key parentKey = this.parentKey;
            if (null != parentKeyKey){
                parent = {{=parent_class_name}}.Get(parentKey);
                this.parent = parent;
            }
        }
        return parent;
    }
    public boolean setParent({{=parent_class_name}} ancestor){
        if (IsNotEqual(this.parent,ancestor)){
            this.parent = ancestor;
            if (null != ancestor)
                this.parentKey = ancestor.getClassFieldKeyValue();
            return true;
        }
        else
            return false;
    }
{{/class_re_child_or_group}}
{{#pfield}}
    public boolean has{{=field_nameCamel}}(boolean mayInherit){
        return (null != this.get{{=field_nameCamel}}(mayInherit));
    }
    public boolean hasNot{{=field_nameCamel}}(boolean mayInherit){
        return (null == this.get{{=field_nameCamel}}(mayInherit));
    }
    public boolean drop{{=field_nameCamel}}(){
        if (null != this.{{=field_name}}){
            this.{{=field_name}} = null;
            return true;
        }
        else
            return false;
    }{{#field_is_not_inheritable}}
    public {{=field_class}} get{{=field_nameCamel}}(){
        return this.{{=field_name}};
    }
    public {{=field_class}} get{{=field_nameCamel}}(boolean ignore){
        return this.{{=field_name}};
    }{{/field_is_not_inheritable}}{{#field_is_inheritable}}
    public {{=field_class}} get{{=field_nameCamel}}(boolean mayInherit){
        if (mayInherit){
            {{=field_class}} {{=field_name}} = this.{{=field_name}};
            if (null == {{=field_name}} && this.hasInheritFrom()){
                {{=class_name}} inheritFrom = this.getInheritFrom();
                if (null != inheritFrom)
                    return inheritFrom.get{{=field_nameCamel}}(true);
            }
            return {{=field_name}};
        }
        else
            return this.{{=field_name}};
    }
    public boolean set{{=field_nameCamel}}({{=field_class}} {{=field_name}}, boolean withInheritance){
        if (IsNotEqual(this.{{=field_name}},this.get{{=field_nameCamel}}(withInheritance))){
            this.{{=field_name}} = {{=field_name}};
            return true;
        }
        else
            return false;
    }{{/field_is_inheritable}}
    public boolean set{{=field_nameCamel}}({{=field_class}} {{=field_name}}){
        if (IsNotEqual(this.{{=field_name}},{{=field_name}})){
            this.{{=field_name}} = {{=field_name}};
            return true;
        }
        else
            return false;
    }
{{/pfield}}{{#cfield}}
    public boolean has{{=field_nameCamel}}(boolean mayInherit){
        return (null != this.get{{=field_nameCamel}}(mayInherit));
    }
    public boolean hasNot{{=field_nameCamel}}(boolean mayInherit){
        return (null == this.get{{=field_nameCamel}}(mayInherit));
    }
    public boolean drop{{=field_nameCamel}}(){
        if (null != this.{{=field_name}}){
            this.{{=field_name}} = null;
            return true;
        }
        else
            return false;
    }
    public {{=field_class}} get{{=field_nameCamel}}(boolean mayInherit){
        {{=field_class}} {{=field_name}} = this.{{=field_name}};
        if (null == {{=field_name}}){
            if (mayInherit && this.hasInheritFrom()){
                {{=class_name}} inheritFrom = this.getInheritFrom();
                if (null != inheritFrom){
                    {{=field_name}} = inheritFrom.get{{=field_nameCamel}}(true);
                    if (null != {{=field_name}})
                        return {{=field_name}};
                }
            }
            {{=field_name}} = new {{=field_impl_class_name}}(this);
            this.{{=field_name}} = {{=field_name}};
            {{=field_name}}.init();
        }
        return {{=field_name}};
    }
    public void set{{=field_nameCamel}}({{=field_class}} {{=field_name}}){
        this.{{=field_name}} = {{=field_name}};
    }
    public boolean isEmpty{{=field_nameCamel}}(){
        {{=field_class}} collection = this.{{=field_name}};
        if (null != collection)
            return collection.isEmpty();
        else
            return true;
    }
    public boolean isNotEmpty{{=field_nameCamel}}(){
        {{=field_class}} collection = this.{{=field_name}};
        if (null != collection)
            return (!collection.isEmpty());
        else
            return false;
    }{{#field_is_list}}
    public {{=field_list_component}} get{{=field_nameCamel}}(gap.data.ListFilter<{{=field_list_component}}> filter){
        if (null != filter){
            {{=field_class}} list = this.get{{=field_nameCamel}}(true);
            for ({{=field_list_component}} item : list){
                if (filter.accept(item))
                    return item;
            }
            return null;
        }
        else
            throw new IllegalArgumentException();
    }{{/field_is_list}}{{#field_is_map}}
    public {{=field_map_component_to}} get{{=field_nameCamel}}({{=field_map_component_from}} {{=field_name}}Key){
        if (null != {{=field_name}}Key){
            {{=field_class}} map = this.get{{=field_nameCamel}}(true);
            if (null != map)
                return map.get({{=field_name}}Key);
            else
                return null;
        }
        else
            throw new IllegalArgumentException();
    }{{/field_is_map}}
{{/cfield}}
{{#tfield}}
    public boolean has{{=field_nameCamel}}(){
        return (null != this.{{=field_name}});
    }
    public boolean hasNot{{=field_nameCamel}}(){
        return (null == this.{{=field_name}});
    }
    public {{=field_class}} get{{=field_nameCamel}}(){
        return this.{{=field_name}};
    }
    public void set{{=field_nameCamel}}({{=field_class}} {{=field_name}}){
        this.{{=field_name}} = {{=field_name}};
    }
{{/tfield}}

    /*
     * Data binding supports
     */
    public String getClassKind(){
        return KIND;
    }
    public String getClassName(){
        return ClassName;
    }
    public {{=field_unique_class}} getClassFieldUnique(){
        return "{{=field_unique_name}}";
    }
    public String getClassFieldKeyName(){
        return "{{=field_key_name}}";
    }
    public List<gap.data.Field> getClassFields(){
        return (new gap.data.Field.List(Field.values()));
    }
    public gap.data.Field getClassFieldByName(String name){
        return Field.getField(name);
    }
    public java.io.Serializable valueOf(gap.data.Field field, boolean mayInherit){
        return (java.io.Serializable)Field.Get((Field)field,this,mayInherit);
    }
    public void define(gap.data.Field field, java.io.Serializable value){
        Field.Set((Field)field,this,value);
    }
    public TemplateDictionary dictionaryInto(gap.service.Parameters params, TemplateDictionary top){
        if (null != params && params.hasFields()){
            TemplateDictionary data = top.addSection(ClassName);
            for (String name: params.getFields()){
                Field field = Field.getField(name);
                if (null != field){
                    java.lang.Object value = Field.Get(field,this,true);
                    if (null != value){
                        if (value instanceof DictionaryInto){
                            DictionaryInto dvalue = (DictionaryInto)value;
                            TemplateDictionary dsection = data.addSection(field.name());
                            dvalue.dictionaryInto(dsection);
                        }
                        else
                            data.putVariable(field.name(),{{=package_name}}.validate.{{=class_name}}.ToString(field,value));
                    }
                }
            }
            return top;
        }
        else
            return this.dictionaryInto(top);
    }
    public TemplateDictionary dictionaryInto(TemplateDictionary top){
        TemplateDictionary data = top.addSection(ClassName);
        for (Field field : Field.values()){
            java.lang.Object value = Field.Get(field,this,true);
            if (null != value){
                if (value instanceof DictionaryInto){
                    DictionaryInto dvalue = (DictionaryInto)value;
                    TemplateDictionary dsection = data.addSection(field.name());
                    dvalue.dictionaryInto(dsection);
                }
                else
                    data.putVariable(field.name(),{{=package_name}}.validate.{{=class_name}}.ToString(field,value));
            }
        }
        return top;
    }
    public boolean updateFrom(Request req){
        boolean change = false;{{#pfield}}{{#field_is_updatable}}
        {{=field_class}} {{=field_name}} = Strings.{{=field_class}}FromString(req.getParameter("{{=field_name}}"));
        if (this.set{{=field_nameCamel}}({{=field_name}},true)){
            change = true;
        }{{/field_is_updatable}}{{/pfield}}
        return change;
    }
    public boolean updateFrom(BigTable proto){
        return this.updateFrom( ({{=class_name}})proto);
    }
    public boolean updateFrom({{=class_name}} proto){
        boolean change = false;{{#pfield}}{{#field_is_updatable}}
        {{=field_class}} {{=field_name}} = proto.get{{=field_nameCamel}}();
        if (null != {{=field_name}} && this.set{{=field_nameCamel}}({{=field_name}},true)){
            change = true;
        }{{/field_is_updatable}}{{/pfield}}
        return change;
    }
    public void drop(){
        Delete(this);
    }
    public void clean(){
        Clean(this);
    }
    public void save(){
        Save(this);
    }
    public void store(){
        Store(this);
    }
    public gap.service.od.ClassDescriptor getClassDescriptorFor(){
        return ClassDescriptorFor(this.getClass());
    }{{#class_re_child_or_group}}
    public gap.service.od.ClassDescriptor getClassDescriptorForParent(){
        return ClassDescriptorForParent();
    }{{/class_re_child_or_group}}
}
