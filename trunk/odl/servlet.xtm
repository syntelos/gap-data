
package {{=package_name}}.servlet;

import {{=package_name}}.validate.{{=class_name}}Validate;

import {{=package_name}}.*;

{{#import}}import {{=import_spec}};
{{/import}}
import gap.service.Accept;
import gap.service.Error;
import gap.service.Logon;
import gap.service.Path;
import gap.service.Parameters;
import gap.service.Templates;

import hapax.TemplateDictionary;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import java.io.IOException;

import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.LogRecord;

import javax.annotation.Generated;

/**
 * Data binding methods.
 */
@Generated(value={"gap.od","{{=odl_gen_xtm_src}}"},date="{{=odl_gen_timestamp}}",comments="{{=odl_gen_odl_src}}")
public abstract class {{=class_name}}
    extends gap.service.AbstractServlet
{


    public enum Op {
        Create, Goto, Update, Delete;
    }



    public {{=class_name}}(){
        super();
    }


    protected void doGet(Path path, Accept accept, Logon logon, HttpServletRequest req, HttpServletResponse rep)
        throws ServletException, IOException
    {
            if (accept.accept("text/html")){

                TemplateDictionary top = logon.dict;

                if (logon.isLoggedIn()){

                    String id = path.get(0);
                    if (null != id){

                        {{=class_name}} instance = {{=class_name}}.For{{=field_unique_nameCamel}}(id);

                        if (null != instance){

                            TemplateDictionary item = top.addSection("item");

                            for ({{=class_name}}.Field field : {{=class_name}}.Field.values()){
                                Object value = instance.valueOf(field);
                                if (null != value)
                                    item.setVariable(field.getFieldName(),{{=class_name}}Validate.ToString(field,value));
                            }
                        }
                        else {
                            this.error(path,accept,logon,method,req,rep,404,"Not found.");
                            return;
                        }
                    }
                    else {
                        Parameters control = new Parameters(req);

                        TemplateDictionary list = top.addSection("list");

                        control.dictionaryInto(databases);

                        com.google.appengine.api.datastore.Query query = {{=class_name}}.CreateQueryFor();
{{#field_hash_unique}}{{#field_hash_unique_it_First}}
                        query.addSort("{{=field_name}}",control.sort.sortOrder);
{{/field_hash_unique_it_First}}{{/field_hash_unique}}

                        com.google.appengine.api.datastore.FetchOptions page = com.google.appengine.api.datastore.FetchOptions.Builder.withLimit(control.page.count).offset(control.page.startIndex);

                        java.util.List<{{=class_name}}> list = (java.util.List<{{=class_name}}>){{=class_name}}.QueryN(query,page);

                        for ({{=class_name}} item : list){

                            TemplateDictionary p = databases.addSection("item");

                            for ({{=class_name}}.Field field : {{=class_name}}.Field.values()){
                                Object value = instance.valueOf(field);
                                if (null != value)
                                    item.setVariable(field.getFieldName(),value.toString());
                            }
                        }
                    }
                }

                this.render(top,rep);

                rep.setHeader("Content-Type","text/html;charset=UTF-8");
            }
            else
                rep.setStatus(400);

    }

    protected void doPost(Path path, Accept accept, Logon logon, Method method, HttpServletRequest req, HttpServletResponse rep)
        throws ServletException, IOException
    {

            if (accept.accept("text/html")){

                TemplateDictionary top = logon.dict;

                if (logon.isLoggedIn()){

                    String opString = req.getParameter("op");
                    if (null != opString){
                        Op op = Op.valueOf(opString);
                        if (null != op){
                            switch (op){
{{#field_hash_unique}}
                            case Create:{
{{#field}}
                                String {{field_name}} = {{=class_name}}Validate.{{=field_nameCamel}}FromString(req.getParameter("{{=field_name}}"));
{{/field}}
                                if ({{#field}}{{#field_it_NotFirst}} && {{/field_it_NotFirst}}null != {{=field_name}}{{/field}}){
                                    {{=class_name}} instance = {{=class_name}}.For{{#field}}{{=field_nameCamel}}{{/field}}({{#field}}{{#field_it_NotFirst}}, {{/field_it_NotFirst}}{{=field_class}} {{=field_name}}{{/field}});

                                    if (null == instance){

                                        instance = new {{=class_name}}({{#field}}{{#field_it_NotFirst}}, {{/field_it_NotFirst}} {{=field_name}}{{/field}});

                                        instance.save();

                                        this.redirectToItem(instance.get{{=field_unique_nameCamel}}());

                                        return;
                                    }
                                    else {
                                        this.error(req,rep,path,accept,logon,400,"Not available to create.");
                                        return;
                                    }
                                }
                                else {
                                    this.error(req,rep,path,accept,logon,400,"Missing value for parameter.");
                                    return;
                                }
                            }
                            case Goto:{
{{#field}}
                                String {{field_name}} = req.getParameter("{{=field_name}}");
{{/field}}
                                if ({{#field}}{{#field_it_NotFirst}} && {{/field_it_NotFirst}}null != {{=field_name}}{{/field}}){
                                    {{=class_name}} instance = {{=class_name}}.For{{#field}}{{=field_nameCamel}}{{/field}}({{#field}}{{#field_it_NotFirst}}, {{/field_it_NotFirst}}{{=field_class}} {{=field_name}}{{/field}});

                                    if (null != instance){

                                        this.redirectToItem(instance.get{{=field_unique_nameCamel}}());

                                        return;
                                    }
                                    else {
                                        this.error(req,rep,path,accept,logon,400,"Not available to create.");
                                        return;
                                    }
                                }
                                else {
                                    this.error(req,rep,path,accept,logon,400,"Missing value for parameter.");
                                    return;
                                }
                            }
{{/field_hash_unique}}
                            case Update:{

                                String id = path.get(0);
                                if (null != id){

                                    {{=class_name}} instance = {{=class_name}}.For{{=field_unique_nameCamel}}(id);

                                    if (null != instance){
                                        boolean change = false;
{{#pfield}}{{#field_is_not_unique}}{{#field_is_not_hash_unique}}
                                        String {{=field_name}} = {{=class_name}}Validate.{{=field_nameCamel}}FromString(req.getParameter("{{=field_name}}"));
                                        if (null != {{=field_name}}){
                                            instance.set{{=field_nameCamel}}({{=field_name}});
                                            change = true;
                                        }
{{/field_is_not_hash_unique}}{{/field_is_not_unique}}{{/pfield}}

                                        if (change)
                                            instance.save();

                                        this.redirectToItem(id);

                                        return;
                                    }
                                    else {
                                        this.error(req,rep,path,accept,logon,404,"Not found.");
                                        return;
                                    }
                                }
                                else {
                                    this.error(req,rep,path,accept,logon,404,"Not found.");
                                    return;
                                }
                            }

                            case Delete:{

                                String id = path.get(0);
                                if (null != id){

                                    {{=class_name}} instance = {{=class_name}}.For{{=field_unique_nameCamel}}(id);

                                    if (null != instance){

                                        db.drop();

                                        rep.redirectToCollection();

                                        return;
                                    }
                                    else {
                                        this.error(req,rep,path,accept,logon,404,"Not found.");
                                        return;
                                    }
                                }
                                else {
                                    this.error(req,rep,path,accept,logon,404,"Not found.");
                                    return;
                                }
                            }

                            default:
                                this.error(req,rep,path,accept,logon,400,"Unrecognized value for parameter 'op' = '"+opString+"'?");
                                return;
                            }
                        }
                        else {
                            this.error(req,rep,path,accept,logon,400,"Missing value for parameter 'op'.");
                            return;
                        }
                    }
                    else {
                        this.error(req,rep,path,accept,logon,400,"Missing parameter 'op'.");
                        return;
                    }
                }
                else {

                    this.render(top,rep);

                    rep.setHeader("Content-Type","text/html;charset=UTF-8");
                }
            }
            else
                rep.setStatus(400);
    }

}
