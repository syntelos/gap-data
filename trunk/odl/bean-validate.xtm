
package {{=package_name}}.validate;
{{#import}}
import {{=import_spec}};{{/import}}

import {{=package_name}}.*;
import static {{=package_name}}.{{=class_name}}.Field.*;

import gap.service.Accept;
import gap.service.Error;
import gap.service.Logon;
import gap.service.Path;
import gap.service.Parameters;
import gap.service.Templates;

import hapax.TemplateDictionary;

import com.google.appengine.api.datastore.*;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import java.io.IOException;

import javax.annotation.Generated;

/**
 * Generated data bean string I/O functions.
 */
@Generated(value={"{{=odl_gen_class}}","{{=odl_gen_xtm_src}}"},date="{{=odl_gen_timestamp}}")
public abstract class {{=class_name}}
    extends gap.Strings
{
    public final static Object FromString({{=package_name}}.{{=class_name}}.Field field, String string){
        switch(field){{{#pfield}}{{#field_is_not_collection}}
          case {{=field_nameCamel}}:
            return {{=field_classCleanClean}}FromString(string);{{/field_is_not_collection}}{{/pfield}}
        default:
            throw new IllegalStateException(field.name());
        }
    }
    public final static String ToString({{=package_name}}.{{=class_name}}.Field field, Object value){
        switch(field){{{#pfield}}{{#field_is_not_collection}}
          case {{=field_nameCamel}}:
            return {{=field_classCleanClean}}ToString( ({{=field_classClean}})value);{{/field_is_not_collection}}{{/pfield}}
        default:
            throw new IllegalStateException(field.name());
        }
    }
}
