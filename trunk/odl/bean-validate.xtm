
package {{=package_name}}.validate;
{{#import}}
import {{=import_spec}};{{/import}}

import {{=package_name}}.*;
import static {{=package_name}}.{{=class_name}}.Field.*;

import gap.service.Accept;
import gap.service.Error;
import gap.service.Logon;
import gap.service.Path;
import gap.service.Parameters;
import gap.service.Templates;

import hapax.TemplateDictionary;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import java.io.IOException;

/**
 * Data validation functions.
 */
public abstract class {{=class_name}}
    extends gap.Strings
{
    public final static Object FromString({{=class_name}}.Field field, String string){
        switch(field){
{{#pfield}}        case {{=field_nameCamel}}:
            return {{=field_nameCamel}}FromString(string);{{/pfield}}
        default:
            throw new IllegalStateException(field.name());
        }
    }
    public final static String ToString({{=class_name}}.Field field, Object value){
        switch(field){
{{#pfield}}        case {{=field_nameCamel}}:
            return {{=field_nameCamel}}ToString(value);{{/pfield}}
        default:
            throw new IllegalStateException(field.name());
        }
    }
{{#pfield}}
    public final static Object {{=field_nameCamel}}FromString(String string){
        return {{=field_classClean}}FromString(string);
    }
    public final static String {{=field_nameCamel}}ToString(Object value){
        return {{=field_classClean}}ToString(value);
    }
{{/pfield}}
}
