/*
 * Gap Data
 * Copyright (C) 2009 John Pritchard
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 * 02110-1301 USA.
 */
package {{=package_name}};
{{#import}}
import {{=import_spec}};{{/import}}

import gap.*;
import gap.data.*;
import gap.hapax.TemplateDataDictionary;
import gap.hapax.TemplateName;
import gap.util.*;

import com.google.appengine.api.datastore.*;
import com.google.appengine.api.blobstore.BlobKey;

import java.util.Date;

import javax.annotation.Generated;

/**
 * Generated bean data binding.
 *
 * @see {{=class_name}}
 */
@Generated(value={"{{=odl_gen_class}}","{{=odl_gen_xtm_src}}"},date="{{=odl_gen_timestamp}}")
public abstract class {{=class_name}}Data
    extends gap.data.BigTable
    implements DataInheritance<{{=class_name}}>{{#implements}}{{#implements_it_First}},{{/implements_it_First}}
               {{=interface_class}}{{#implements_it_NotLast}},{{/implements_it_NotLast}}{{/implements}}
{

    private final static long serialVersionUID = {{=class_version}};

    public final static Kind KIND = Kind.Create("{{=class_kind}}","{{=package_name}}","{{=class_name}}","{{=class_path}}");

    public final static String ClassName = "{{=class_name}}";

    public final static String DefaultSortBy = "{{=class_defaultSortBy}}";


    public final static gap.service.od.ClassDescriptor ClassDescriptorFor(){
        return ClassDescriptorFor({{=class_name}}.class);
    }{{#class_re_child}}
    public final static gap.service.od.ClassDescriptor ClassDescriptorForParent(){
        return ClassDescriptorFor({{=parent_class_name}}.class);
    }{{/class_re_child}}
    /**
     * @see gap.data.Kind#pathto()
     */
    public final static String PathTo(){
        return KIND.pathto();
    }
    public final static String PathTo(String subpath){
        return KIND.pathto(subpath);
    }
{{#class_re_not_child}}
    /**
     * Long instance key without parent key
     */
    public final static Key KeyLongIdFor({{#field_unique}}{{#field_unique_it_NotFirst}}, {{/field_unique_it_NotFirst}}{{=field_class}} {{=field_name}}{{/field_unique}}){
        String id = {{=class_name}}.IdFor({{#field_unique}}{{#field_unique_it_NotFirst}}, {{/field_unique_it_NotFirst}} {{=field_name}}{{/field_unique}});
        return KeyLongFor(id);
    }{{/class_re_not_child}}{{#class_re_child}}
    /**
     * Short instance key from parent key
     */
    public final static Key KeyShortIdFor(Key ancestor, {{#field_unique}}{{#field_unique_it_NotFirst}}, {{/field_unique_it_NotFirst}}{{=field_class}} {{=field_name}}{{/field_unique}}){
        String id = {{=class_name}}.IdFor({{#field_unique}}{{#field_unique_it_NotFirst}}, {{/field_unique_it_NotFirst}} {{=field_name}}{{/field_unique}});
        return {{=class_name}}.KeyShortFor(ancestor,id);
    }{{/class_re_child}}
    /**
     * Used by gap.data.Kind
     *
     * Calls {@link #{{#class_re_not_child}}KeyLongIdFor{{/class_re_not_child}}{{#class_re_child}}KeyShortIdFor{{/class_re_child}}}
     */
    public final static Key KeyIdFor(Object... args){{{#class_re_not_child}}
        return {{=class_name}}.KeyLongIdFor({{#field_unique}}{{#field_unique_it_NotFirst}}, {{/field_unique_it_NotFirst}}({{=field_class}})args[{{=field_unique_it_Index}}]{{/field_unique}});{{/class_re_not_child}}{{#class_re_child}}
        return {{=class_name}}.KeyShortIdFor( (Key)args[0], {{#field_unique}}{{#field_unique_it_NotFirst}}, {{/field_unique_it_NotFirst}}({{=field_class}})args[{{=field_unique_it_Count}}]{{/field_unique}});{{/class_re_child}}
    }
    /**
     * Used by setId
     *
     * Calls {@link #{{#class_re_not_child}}KeyLongFor{{/class_re_not_child}}{{#class_re_child}}KeyShortFor{{/class_re_child}}}
     */
    public final static Key KeyFor(Object... args){{{#class_re_not_child}}
        return {{=class_name}}.KeyLongFor( (String)args[0]);{{/class_re_not_child}}{{#class_re_child}}
        return {{=class_name}}.KeyShortFor( (Key)args[0], (String)args[1]);{{/class_re_child}}
    }
    /**
     * Identifier for unique fields
     */
    public final static String IdFor({{#field_unique}}{{#field_unique_it_NotFirst}}, {{/field_unique_it_NotFirst}}{{=field_class}} {{=field_name}}{{/field_unique}}){
        if ({{#field_unique}}{{#field_unique_it_NotFirst}} && {{/field_unique_it_NotFirst}}null != {{=field_name}}{{/field_unique}}){{{#field_unique}}
            String {{=field_name}}String = {{=field_to_string_prefix}}{{=field_name}}{{=field_to_string_suffix}};{{/field_unique}}
            return gap.data.Hash.For({{#field_unique}}{{#field_unique_it_NotFirst}}+'/'+{{/field_unique_it_NotFirst}}{{=field_name}}String{{/field_unique}});
        }
        else
            throw new IllegalArgumentException();
    }
{{#class_re_not_child}}
    /**
     * Instance lookup
     */
    public final static {{=class_name}} ForLong{{#field_unique}}{{=field_nameCamel}}{{/field_unique}}({{#field_unique}}{{#field_unique_it_NotFirst}}, {{/field_unique_it_NotFirst}}{{=field_class}} {{=field_name}}{{/field_unique}}){
        if ({{#field_unique}}{{#field_unique_it_NotFirst}} && {{/field_unique_it_NotFirst}}null != {{=field_name}}{{/field_unique}}){
            Key key = {{=class_name}}.KeyLongIdFor({{#field_unique}}{{#field_unique_it_NotFirst}},{{/field_unique_it_NotFirst}} {{=field_name}}{{/field_unique}});
            {{=class_name}} instance = ({{=class_name}})gap.data.Store.GetClass(key);
            if (null != instance)
                return instance;
            else {
                Query q = {{=class_name}}.CreateQueryFor(key);
                return ({{=class_name}})gap.data.Store.Query1Class(q);
            }
        }
        else
            throw new IllegalArgumentException();
    }{{/class_re_not_child}}{{#class_re_child}}
    /**
     * Instance lookup from parent key
     */
    public final static {{=class_name}} ForShort{{#field_unique}}{{=field_nameCamel}}{{/field_unique}}(Key ancestor, {{#field_unique}}{{#field_unique_it_NotFirst}}, {{/field_unique_it_NotFirst}}{{=field_class}} {{=field_name}}{{/field_unique}}){
        if ({{#field_unique}}{{#field_unique_it_NotFirst}} && {{/field_unique_it_NotFirst}}null != {{=field_name}}{{/field_unique}}){
            Key key = {{=class_name}}.KeyShortIdFor(ancestor,{{#field_unique}}{{#field_unique_it_NotFirst}},{{/field_unique_it_NotFirst}} {{=field_name}}{{/field_unique}});
            {{=class_name}} instance = ({{=class_name}})gap.data.Store.GetClass(key);
            if (null != instance)
                return instance;
            else {
                Query q = {{=class_name}}.CreateQueryFor(key);
                return ({{=class_name}})gap.data.Store.Query1Class(q);
            }
        }
        else
            throw new IllegalArgumentException();
    }{{/class_re_child}}
{{#class_re_not_child}}
    /**
     * Instance lookup or create
     */
    public static {{=class_name}} GetCreateLong({{#field_unique}}{{#field_unique_it_NotFirst}}, {{/field_unique_it_NotFirst}}{{=field_class}} {{=field_name}}{{/field_unique}}){
        return GetCreateLong{{#field_unique}}{{=field_nameCamel}}{{/field_unique}}({{#field_unique}}{{#field_unique_it_NotFirst}}, {{/field_unique_it_NotFirst}} {{=field_name}}{{/field_unique}});
    }
    /**
     * Instance lookup or create
     */
    public final static {{=class_name}} GetCreateLong{{#field_unique}}{{=field_nameCamel}}{{/field_unique}}({{#field_unique}}{{#field_unique_it_NotFirst}}, {{/field_unique_it_NotFirst}}{{=field_class}} {{=field_name}}{{/field_unique}}){
        {{=class_name}} {{=class_nameDecamel}} = {{=class_name}}.ForLong{{#field_unique}}{{=field_nameCamel}}{{/field_unique}}({{#field_unique}}{{#field_unique_it_NotFirst}},{{/field_unique_it_NotFirst}} {{=field_name}}{{/field_unique}});
        if (null == {{=class_nameDecamel}}){
            {{=class_nameDecamel}} = new {{=class_name}}({{#field_unique}}{{#field_unique_it_NotFirst}},{{/field_unique_it_NotFirst}} {{=field_name}}{{/field_unique}});
            {{=class_nameDecamel}} = ({{=class_name}})gap.data.Store.PutClass({{=class_nameDecamel}});
        }
        return {{=class_nameDecamel}};
    }{{/class_re_not_child}}{{#class_re_child}}
    /**
     * Instance lookup or create from parent key
     */
    public final static {{=class_name}} GetCreateShort(Key ancestor, {{#field_unique}}{{#field_unique_it_NotFirst}}, {{/field_unique_it_NotFirst}}{{=field_class}} {{=field_name}}{{/field_unique}}){
        {{=class_name}} {{=class_nameDecamel}} = {{=class_name}}.ForShort{{#field_unique}}{{=field_nameCamel}}{{/field_unique}}(ancestor,{{#field_unique}}{{#field_unique_it_NotFirst}},{{/field_unique_it_NotFirst}} {{=field_name}}{{/field_unique}});
        if (null == {{=class_nameDecamel}}){
            {{=class_nameDecamel}} = new {{=class_name}}(ancestor,{{#field_unique}}{{#field_unique_it_NotFirst}},{{/field_unique_it_NotFirst}} {{=field_name}}{{/field_unique}});
            {{=class_nameDecamel}} = ({{=class_name}})gap.data.Store.PutClass({{=class_nameDecamel}});
        }
        return {{=class_nameDecamel}};
    }{{/class_re_child}}

{{#class_re_not_child}}
    public final static Key KeyLongFor(String id){
        return KeyFactory.createKey(KIND.getName(),id);
    }{{/class_re_not_child}}{{#class_re_child}}
    public final static Key KeyShortFor(Key ancestor, String id){
        return KeyFactory.createKey(ancestor,KIND.getName(),id);
    }{{/class_re_child}}

{{#class_re_not_child}}
    public final static {{=class_name}} ForLongId(String id){
        if (null != id){
            Key key = {{=class_name}}.KeyLongFor(id);
            {{=class_name}} instance = ({{=class_name}})gap.data.Store.GetClass(key);
            if (null != instance)
                return instance;
            else {
                Query q = {{=class_name}}.CreateQueryFor(key);
                return ({{=class_name}})gap.data.Store.Query1Class(q);
            }
        }
        else
            throw new IllegalArgumentException();
    }{{/class_re_not_child}}{{#class_re_child}}
    public final static {{=class_name}} ForShortId(Key ancestor, String id){
        if (null != ancestor && ancestor.isComplete() && null != id){
            Key key = {{=class_name}}.KeyShortFor(ancestor,id);
            {{=class_name}} instance = ({{=class_name}})gap.data.Store.GetClass(key);
            if (null != instance)
                return instance;
            else {
                Query q = {{=class_name}}.CreateQueryFor(key);
                return ({{=class_name}})gap.data.Store.Query1Class(q);
            }
        }
        else
            throw new IllegalArgumentException();
    }{{/class_re_child}}

    /**
     * Used by gap.data.Kind
     */
    public final static {{=class_name}} Get(Key key){
        if (null != key){
            {{=class_name}} instance = ({{=class_name}})gap.data.Store.GetClass(key);
            if (null != instance)
                return instance;
            else {
                Query q = {{=class_name}}.CreateQueryFor(key);
                return ({{=class_name}})gap.data.Store.Query1Class(q);
            }
        }
        else
            throw new IllegalArgumentException();
    }
    public final static Key GetKey(Key key){
        if (null != key){
            Query q = {{=class_name}}.CreateQueryFor(key);
            return gap.data.Store.Query1Key(q);
        }
        else
            throw new IllegalArgumentException();
    }
    public final static {{=class_name}} FromObject(Object value){
        if (null == value)
            return null;
        else if (value instanceof {{=class_name}})
            return ({{=class_name}})value;
        else if (value instanceof Key)
            return Get( (Key)value);
        else if (value instanceof String){
            /*
             * TODO: ilarg: not key.enc; Key For ID.
             */
            Key key = gap.Strings.KeyFromString( (String)value);
            return Get(key);
        }
        else
            throw new IllegalArgumentException(value.getClass().getName());
    }

{{#class_re_not_child}}
    /**
     * Anonymous random key cannot be mapped to network identifier
     * @see {{=class_name}}#IdFor
     *
     * Test for uniqueness and iterate under collisions.
     */
    public final static Key NewRandomKeyLong(){
        /*
         * Source matter for data local uniqueness
         */
        long matter = (gap.data.Hash.Djb64(ClassName) ^ (serialVersionUID<<3) ^ serialVersionUID);
        /*
         * Random matter for network global uniqueness
         */
        java.util.Random random = new java.util.Random();
        do {
            matter ^= random.nextLong();
            String idString = gap.data.Hash.Hex(matter);
            Key key = KeyFactory.createKey(KIND.getName(),idString);
            if (null == GetKey(key))
                return key;
        }
        while (true);
    }{{/class_re_not_child}}{{#class_re_child}}
    /**
     * Anonymous random key cannot be mapped to network identifier
     * @see {{=class_name}}#IdFor
     *
     * Test for uniqueness and iterate under collisions.
     */
    public final static Key NewRandomKeyShort(Key ancestor){
        if (null != ancestor){
            /*
             * Source matter for data local uniqueness
             */
            long matter = gap.data.Hash.Djb64(gap.data.BigTable.ToString(ancestor));
            /*
             * Random matter for network global uniqueness
             */
            java.util.Random random = new java.util.Random();
            do {
                matter ^= random.nextLong();
                String idString = gap.data.Hash.Hex(matter);
                Key key = KeyFactory.createKey(ancestor,KIND.getName(),idString);
                if (null == GetKey(key))
                    return key;
            }
            while (true);
        }
        else
            throw new IllegalArgumentException();
    }
    /**
     * Drop all children of the parent
     */
    public final static void Delete({{=parent_class_name}} parent){
        if (null != parent){
            DeleteChildrenOf(parent.getKey());
        }
    }
    /**
     * Drop all children of the parent
     */
    public final static void DeleteChildrenOf(Key parentKey){
        if (null != parentKey){
             gap.data.Store.DeleteCollection(KIND,{{=class_name}}.CreateQueryFor(parentKey));
        }
    }{{/class_re_child}}
    /**
     * Drop the instance from memcache and datastore.
     */
    public final static void Delete({{=class_name}} instance){
        if (null != instance){

            Delete(instance.getKey());
        }
    }
    /**
     * Drop the instance from memcache and datastore.
     */
    public final static void Delete(Key instanceKey){
        if (null != instanceKey){

            gap.data.Store.DeleteKey(instanceKey);
        }
    }
    /**
     * Drop the instance from memcache, exclusively.
     */
    public final static void Clean({{=class_name}} instance){
        if (null != instance){
            Key key = instance.getKey();
            gap.data.Store.CleanKey(key);
        }
    }
    /**
     * Store the instance.
     */
    public final static void Save({{=class_name}} instance){
        if (null != instance){
            gap.data.Store.PutClass(instance);
        }
    }
    /**
     * Write the instance to store.
     */
    public final static void Store({{=class_name}} instance){
        if (null != instance){
            gap.data.Store.PutClass(instance);
        }
    }
    /**
     * Default sort
     */
    public final static Query CreateQueryFor(){
        return new Query(KIND.getName()).addSort(DefaultSortBy);
    }
    /**
     * Default sort
     */
    public final static Query CreateQueryFor(Key key){
        return new Query(KIND.getName(),key).addSort(DefaultSortBy);
    }{{#class_re_not_child}}
    /**
     * Filter ops
     */
    public final static Query CreateQueryFor(Filter filter){
        Query query = new Query(KIND.getName());
        return filter.update(query);
    }{{/class_re_not_child}}
    {{#class_re_child}}
    /**
     * Filter ops
     */
    public final static Query CreateQueryFor(Key ancestor, Filter filter){
        Query query = new Query(KIND.getName(),ancestor);
        return filter.update(query);
    }{{/class_re_child}}
    public final static {{=class_name}} Query1(Query query){
        if (null != query)
            return ({{=class_name}})gap.data.Store.Query1Class(query);
        else
            throw new IllegalArgumentException();
    }
    public final static BigTableIterator<{{=class_name}}> QueryN(Query query, Page page){
        if (null != query && null != page)
            return gap.data.Store.QueryNClass(query,page);
        else
            throw new IllegalArgumentException();
    }
    public final static Key QueryKey1(Query query){
        if (null != query)
            return gap.data.Store.Query1Key(query);
        else
            throw new IllegalArgumentException();
    }
    public final static List.Primitive<Key> QueryNKey(Query query, Page page){
        if (null != query)
            return gap.data.Store.QueryNKey(query,page);
        else
            throw new IllegalArgumentException();
    }
    public final static List.Primitive<Key> QueryNKey(Query query){
        if (null != query)
            return gap.data.Store.QueryNKey(query);
        else
            throw new IllegalArgumentException();
    }

    /**
     * Persistent fields' binding for {@link {{=class_name}}}
     */
    public static enum Field
        implements gap.data.Field<{{=class_name}}.Field>
    {
        InheritFromKey("inheritFromKey",Type.Primitive),{{#class_re_child}}
        ParentKey("parentKey",Type.Primitive),{{/class_re_child}}
        Key("key",Type.Primitive),
        Id("id",Type.Primitive){{#field}},
        {{=field_nameCamel}}("{{=field_name}}",Type.{{#field_is_primitive}}Primitive{{/field_is_primitive}}{{#field_is_bigTable}}BigTable{{/field_is_bigTable}}{{#field_is_primitive_collection}}Primitive{{/field_is_primitive_collection}}{{#field_is_collection}}Collection{{/field_is_collection}}){{/field}};

        private final static lxl.Map<String,Field> FieldName = new lxl.Map<String,Field>();
        public static final String[] AllNames;
        static {
            Field[] allFields = Field.values();
            int count = allFields.length;
            String[] names = new String[count];
            for (int cc = 0; cc < count; cc++) {
                Field field = allFields[cc];
                String fieldName = field.getFieldName();
                names[cc] = fieldName;
                FieldName.put(fieldName,field);
            }
            AllNames = names;
        }
        public static Field getField(String name) {
            return FieldName.get(name);
        }
        public static Field For(String name) {
            Field field = FieldName.get(name);
            if (null == field)
                try {
                    return Field.valueOf(name);
                }
                catch (IllegalArgumentException notFound){
                    return null;
                }
            else
                return field;
        }
        /**
         * Field statistics are maintained for persistent fields exclusively
         */
        public final static class Statistics
            extends gap.data.Field.Statistics<{{=class_name}}.Field>
        {
            public Statistics(){
                super({{=class_name}}.Field.class);
            }
        }
        /**
         * Dynamic binding operator for field data type
         *
         * Persistent BigTable fields are represented by the string ID.
         */
        public static Object Get(Field field, {{=class_name}} instance, boolean mayInherit){
            switch(field){
            case InheritFromKey:
                return instance.getInheritFromKey();{{#class_re_child}}
            case ParentKey:
                return instance.getParentKey();{{/class_re_child}}
            case Key:
                return instance.getKey();
            case Id:
                return instance.getId();{{#field}}{{#field_is_not_bigTable}}
            case {{=field_nameCamel}}:
                return instance.get{{=field_nameCamel}}(mayInherit);{{/field_is_not_bigTable}}{{#field_is_bigTable}}
            case {{=field_nameCamel}}:
                return instance.get{{=field_nameCamel}}Id();{{/field_is_bigTable}}{{/field}}
            default:
                throw new IllegalArgumentException(field.toString()+" in {{=class_name}}");
            }
        }
        /**
         * Dynamic binding operator for field data type
         *
         * Persistent BigTable fields are represented by the string ID.
         */
        public static boolean Set(Field field, {{=class_name}} instance, Object value){
            switch(field){
            case InheritFromKey:
                return instance.setInheritFromKey(gap.Objects.KeyFromObject(value));{{#class_re_child}}
            case ParentKey:
                return instance.setParentKey(gap.Objects.KeyFromObject(value));{{/class_re_child}}
            case Key:
                return instance.setKey(gap.Objects.KeyFromObject(value));
            case Id:
                return instance.setId(gap.Objects.StringFromObject(value));{{#field}}{{#field_is_not_bigTable}}
            case {{=field_nameCamel}}:
                return instance.set{{=field_nameCamel}}({{=field_from_object_prefix}}value{{=field_from_object_suffix}});{{/field_is_not_bigTable}}{{#field_is_bigTable}}
            case {{=field_nameCamel}}:
                return instance.set{{=field_nameCamel}}Id(gap.Objects.StringFromObject(value));{{/field_is_bigTable}}{{/field}}
            default:
                throw new IllegalArgumentException(field.toString()+" in {{=class_name}}");
            }
        }
        /**
         * Dynamic binding operator for field storage type
         *
         * Persistent BigTable fields are represented by the string ID.
         */
        public static java.io.Serializable Storage(Field field, {{=class_name}} instance){
            switch(field){
            case InheritFromKey:
                return instance.getInheritFromKey();{{#class_re_child}}
            case ParentKey:
                return instance.getParentKey();{{/class_re_child}}
            case Key:
                return instance.getKey();
            case Id:
                return instance.getId();{{#field}}{{#field_is_primitive_collection}}
            case {{=field_nameCamel}}:{
                {{=field_class}} {{=field_name}} = instance.get{{=field_nameCamel}}(MayNotInherit);
                if (null != {{=field_name}})
                    return Serialize.To(field,{{=field_name}});
                else
                    return null;
            }{{/field_is_primitive_collection}}{{#field_is_collection_not_primitive}}
            case {{=field_nameCamel}}:{
                return null;
            }{{/field_is_collection_not_primitive}}{{#field_is_character}}
            case {{=field_nameCamel}}:{
                {{=field_class}} _{{=field_name}} = instance.get{{=field_nameCamel}}(MayNotInherit);
                if (null != _{{=field_name}})
                    return new Integer( _{{=field_name}}.charValue());
                else
                    return null;
            }{{/field_is_character}}{{#field_is_number}}
            case {{=field_nameCamel}}:{
                return instance.get{{=field_nameCamel}}(MayNotInherit);
            }{{/field_is_number}}{{#field_is_biginteger}}
            case {{=field_nameCamel}}:{
                {{=field_class}} _{{=field_name}} = instance.get{{=field_nameCamel}}(MayNotInherit);
                if (null != _{{=field_name}})
                    return new ShortBlob( _{{=field_name}}.toByteArray());
                else
                    return null;
            }{{/field_is_biginteger}}{{#field_is_bigdecimal}}
            case {{=field_nameCamel}}:{
                {{=field_class}} _{{=field_name}} = instance.get{{=field_nameCamel}}(MayNotInherit);
                if (null != _{{=field_name}})
                    return _{{=field_name}}.toString();
                else
                    return null;
            }{{/field_is_bigdecimal}}{{#field_is_serializable}}
            case {{=field_nameCamel}}:{
                {{=field_class}} _{{=field_name}} = instance.get{{=field_nameCamel}}(MayNotInherit);
                return Serialize.To(field,_{{=field_name}});
            }{{/field_is_serializable}}{{#field_is_enum}}
            case {{=field_nameCamel}}:{
                return Strings.EnumToString( instance.get{{=field_nameCamel}}(MayNotInherit));
            }{{/field_is_enum}}{{#field_is_bigTable}}
            case {{=field_nameCamel}}:
                return instance.get{{=field_nameCamel}}Id();{{/field_is_bigTable}}{{#field_is_not_collection}}{{#field_is_not_character}}{{#field_is_not_number}}{{#field_is_not_biginteger}}{{#field_is_not_bigdecimal}}{{#field_is_not_serializable}}{{#field_is_not_enum}}{{#field_is_not_bigTable}}
            case {{=field_nameCamel}}:
                return instance.get{{=field_nameCamel}}(MayNotInherit);{{/field_is_not_bigTable}}{{/field_is_not_enum}}{{/field_is_not_serializable}}{{/field_is_not_bigdecimal}}{{/field_is_not_biginteger}}{{/field_is_not_number}}{{/field_is_not_character}}{{/field_is_not_collection}}{{/field}}
            default:
                throw new IllegalArgumentException(field.toString()+" in {{=class_name}}");
            }
        }
        /**
         * Dynamic binding operator for field storage type
         *
         * Persistent BigTable fields are represented by the string ID.
         */
        public static void Storage(Field field, {{=class_name}} instance, java.io.Serializable value){
            switch(field){
            case InheritFromKey:
                instance.setInheritFromKey( (Key)value);
                return;{{#class_re_child}}
            case ParentKey:
                instance.setParentKey( (Key)value);
                return;{{/class_re_child}}
            case Key:
                instance.setKey( (Key)value);
                return;
            case Id:
                instance.setId( (String)value);
                return;{{#field}}{{#field_is_primitive_collection}}
            case {{=field_nameCamel}}:{
                {{=field_class}} _{{=field_name}} = null;
                if (null != value){
                    _{{=field_name}} = ({{=field_class}})Serialize.From(field,value);
                }
                instance.set{{=field_nameCamel}}( _{{=field_name}});
                return;
            }{{/field_is_primitive_collection}}{{#field_is_collection_not_primitive}}
            case {{=field_nameCamel}}:{
                return;
            }{{/field_is_collection_not_primitive}}{{#field_is_character}}
            case {{=field_nameCamel}}:{
                {{=field_class}} _{{=field_name}} = null;
                if (null != value){
                    _{{=field_name}} = new {{=field_class}}( (char)((Number)value).intValue());
                }
                instance.set{{=field_nameCamel}}( _{{=field_name}});
                return;
            }{{/field_is_character}}{{#field_is_number}}
            case {{=field_nameCamel}}:{

                instance.set{{=field_nameCamel}}( (Number)value);
                return;
            }{{/field_is_number}}{{#field_is_biginteger}}
            case {{=field_nameCamel}}:{
                {{=field_class}} _{{=field_name}} = null;
                if (null != value){
                    _{{=field_name}} = new {{=field_class}}( ((ShortBlob)value).getBytes());
                }
                instance.set{{=field_nameCamel}}( _{{=field_name}});
                return;
            }{{/field_is_biginteger}}{{#field_is_bigdecimal}}
            case {{=field_nameCamel}}:{
                {{=field_class}} _{{=field_name}} = null;
                if (null != value){
                    _{{=field_name}} = new {{=field_class}}( (String)value);
                }
                instance.set{{=field_nameCamel}}( _{{=field_name}});
                return;
            }{{/field_is_bigdecimal}}{{#field_is_serializable}}
            case {{=field_nameCamel}}:{
                {{=field_class}} _{{=field_name}} = ({{=field_class}})Serialize.From(field,value);
                instance.set{{=field_nameCamel}}( _{{=field_name}});
                return;
            }{{/field_is_serializable}}{{#field_is_enum}}
            case {{=field_nameCamel}}:{
                {{field_class}} _{{=field_name}} = ({{=field_class}})Strings.EnumFromString( (String)value);
                instance.set{{=field_nameCamel}}( _{{=field_name}});
                return;
            }{{/field_is_enum}}{{#field_is_bigTable}}
            case {{=field_nameCamel}}:
                instance.set{{=field_nameCamel}}Id( (String)value);
                return;{{/field_is_bigTable}}{{#field_is_not_collection}}{{#field_is_not_character}}{{#field_is_not_number}}{{#field_is_not_biginteger}}{{#field_is_not_bigdecimal}}{{#field_is_not_serializable}}{{#field_is_not_enum}}{{#field_is_not_bigTable}}
            case {{=field_nameCamel}}:
                instance.set{{=field_nameCamel}}( ({{=field_class}})value);
                return;{{/field_is_not_bigTable}}{{/field_is_not_enum}}{{/field_is_not_serializable}}{{/field_is_not_bigdecimal}}{{/field_is_not_biginteger}}{{/field_is_not_number}}{{/field_is_not_character}}{{/field_is_not_collection}}{{/field}}
            default:
                throw new IllegalArgumentException(field.toString()+" in {{=class_name}}");
            }
        }


        public final static class List
            extends gap.util.ArrayList<{{=class_name}}.Field>
        {
            public List(){
                super();
            }
            public List(Field[] fields){
                super(fields);
            }
            public List(Iterable<Field> fields){
                super();
                for (Field field : fields)
                    this.add(field);
            }
        }


        private final String fieldName;

        private final Type fieldType;

        private final boolean fieldTypePrimitive, fieldTypeBigTable, fieldTypeCollection;

        private final boolean fieldNameKeyOrId;


        Field(String fieldName, Type fieldType){
            if (null != fieldName && null != fieldType){
                this.fieldName = fieldName;
                this.fieldType = fieldType;
                this.fieldNameKeyOrId = BigTable.IsKeyOrId(fieldName);
                /*
                 * Using a switch here causes a null pointer
                 * initializing the switch map.
                 */
                if (Type.Primitive == fieldType){
                    this.fieldTypePrimitive = true;
                    this.fieldTypeBigTable = false;
                    this.fieldTypeCollection = false;
                }
                else if (Type.BigTable == fieldType){
                    this.fieldTypePrimitive = false;
                    this.fieldTypeBigTable = true;
                    this.fieldTypeCollection = false;
                }
                else if (Type.Collection == fieldType){
                    this.fieldTypePrimitive = false;
                    this.fieldTypeBigTable = false;
                    this.fieldTypeCollection = true;
                }
                else if (Type.PrimitiveCollection == fieldType){
                    this.fieldTypePrimitive = true;
                    this.fieldTypeBigTable = false;
                    this.fieldTypeCollection = true;
                }
                else
                    throw new IllegalStateException("Unimplemented field type "+fieldType);
            }
            else
                throw new IllegalStateException();
        }


        public String getFieldName(){
            return this.fieldName;
        }
        public Type getFieldType(){
            return this.fieldType;
        }
        public boolean isFieldTypePrimitive(){
            return this.fieldTypePrimitive;
        }
        public boolean isNotFieldTypePrimitive(){
            return (!this.fieldTypePrimitive);
        }
        public boolean isFieldTypeBigTable(){
            return this.fieldTypeBigTable;
        }
        public boolean isNotFieldTypeBigTable(){
            return (!this.fieldTypeBigTable);
        }
        public boolean isFieldTypeCollection(){
            return this.fieldTypeCollection;
        }
        public boolean isNotFieldTypeCollection(){
            return (!this.fieldTypeCollection);
        }
        public boolean isFieldNameKeyOrId(){
            return this.fieldNameKeyOrId;
        }
        public boolean isNotFieldNameKeyOrId(){
            return (!this.fieldNameKeyOrId);
        }
        public String toString(){
            return this.fieldName;
        }
    }

    private final {{=class_name}}.Field.Statistics fieldStatistics = new {{=class_name}}.Field.Statistics();

    private transient {{=class_name}} inheritFrom;

{{#pfield}}{{#field_is_primitive}}
    private {{=field_class}} {{=field_name}};{{/field_is_primitive}}{{#field_is_bigTable}}
    private String {{=field_name}}Id;
    private transient Key {{=field_name}}Key;
    private transient {{=field_class}} {{=field_name}};{{/field_is_bigTable}}{{/pfield}}{{#cfield}}{{#field_is_primitive_collection}}
    private {{=field_class}} {{=field_name}};{{/field_is_primitive_collection}}{{#field_is_not_primitive_collection}}
    private transient {{=field_class}} {{=field_name}};{{/field_is_not_primitive_collection}}{{/cfield}}{{#tfield}}
    private transient {{=field_class}} {{=field_name}};{{/tfield}}

{{#class_re_child}}
    private Key parentKey;
    private transient {{=parent_class_name}} parent;{{/class_re_child}}


    protected {{=class_name}}Data() {
        super();
    }{{#class_re_not_child}}
    protected {{=class_name}}Data({{#field_unique}}{{#field_unique_it_NotFirst}}, {{/field_unique_it_NotFirst}}{{=field_class}} {{=field_name}}{{/field_unique}}) {
        super();{{#field_unique}}
        this.set{{=field_nameCamel}}({{=field_name}});{{/field_unique}}
        {
            final String id = {{=class_name}}.IdFor({{#field_unique}}{{#field_unique_it_NotFirst}}, {{/field_unique_it_NotFirst}}{{=field_name}}{{/field_unique}});
            final Key key = {{=class_name}}.KeyLongFor(id);
            this.setKey(key);
        }
    }{{/class_re_not_child}}{{#class_re_child}}
    protected {{=class_name}}Data(Key ancestor, {{#field_unique}}{{#field_unique_it_NotFirst}}, {{/field_unique_it_NotFirst}}{{=field_class}} {{=field_name}}{{/field_unique}}) {
        super();{{#field_unique}}
        this.set{{=field_nameCamel}}({{=field_name}});{{/field_unique}}
        this.parentKey = ancestor;
        {
            final String id = {{=class_name}}.IdFor({{#field_unique}}{{#field_unique_it_NotFirst}}, {{/field_unique_it_NotFirst}}{{=field_name}}{{/field_unique}});{{#class_re_child}}
            final Key key = {{=class_name}}.KeyShortFor(ancestor,id);{{/class_re_child}}
            this.setKey(key);
        }
    }{{/class_re_child}}


    public void destroy(){
        this.inheritFrom = null;{{#pfield}}
        this.{{=field_name}} = null;{{/pfield}}{{#cfield}}
        {{=field_class}} {{=field_name}} = this.{{=field_name}};
        if (null != {{=field_name}}){
            this.{{=field_name}} = null;
            {{=field_name}}.destroy();
        }{{/cfield}}{{#class_re_child}}
        this.parent = null;{{/class_re_child}}
    }
    public final String getId(){

        String id = {{=class_name}}.IdFor(KIND.name, this.key);
        if (null != id)
            return id;
        else
            return {{=class_name}}.IdFor({{#field_unique}}{{#field_unique_it_NotFirst}}, {{/field_unique_it_NotFirst}}this.{{=field_name}}{{/field_unique}});
    }
    public final boolean setId(String id){
        if (null == id){
            if (null != this.key){
                this.key = null;
                return true;
            }
            else
                return false;
        }
        else if (null == this.key){{{#class_re_not_child}}
            this.key = {{=class_name}}.KeyLongFor(id);{{/class_re_not_child}}{{#class_re_child}}
            this.key = {{=class_name}}.KeyShortFor(this.getParentKey(),id);{{/class_re_child}}
            return true;
        }
        else
            return false;
    }
    public final boolean hasInheritFrom(){
        return (null != this.inheritFrom || null != this.inheritFromKey);
    }
    public final boolean hasNotInheritFrom(){
        return (null == this.inheritFrom && null == this.inheritFromKey);
    }
    public final {{=class_name}} getInheritFrom(){
        {{=class_name}} inheritFrom = this.inheritFrom;
        if (null == inheritFrom){
            Key inheritFromKey = this.inheritFromKey;
            if (null != inheritFromKey){
                inheritFrom = {{=class_name}}.Get(inheritFromKey);
                this.inheritFrom = inheritFrom;
            }
        }
        return inheritFrom;
    }
    public final boolean setInheritFrom({{=class_name}} ancestor){
        if (IsNotEqual(this.inheritFrom,ancestor)){

            this.inheritFrom = ancestor;
            if (null != ancestor)
                this.inheritFromKey = ancestor.getKey();
            return true;
        }
        else
            return false;
    }
    public final boolean inheritFrom({{=class_name}} ancestor){
        if (IsNotEqual(this.inheritFrom,ancestor)){

            this.inheritFrom = ancestor;
            if (null != ancestor)
                this.inheritFromKey = ancestor.getKey();
            return true;
        }
        else
            return false;
    }{{!
}}{{#class_re_child}}
    public final boolean hasParentKey(){
        return (null != this.parentKey);
    }
    public final boolean hasNotParentKey(){
        return (null == this.parentKey);
    }
    public final Key getParentKey(){
        return this.parentKey;
    }
    public final boolean setParentKey(Key ancestor){
        if (IsNotEqual(this.parentKey,ancestor)){

            this.parentKey = ancestor;
            return true;
        }
        else
            return false;
    }
    public final boolean hasParent(){
        return (null != this.parent || null != this.parentKey);
    }
    public final boolean hasNotParent(){
        return (null == this.parent && null == this.parentKey);
    }
    public final {{=parent_class_name}} getParent(){
        {{=parent_class_name}} parent = this.parent;
        if (null == parent){
            Key parentKey = this.parentKey;
            if (null != parentKey){
                parent = {{=parent_class_name}}.Get(parentKey);
                this.parent = parent;
            }
        }
        return parent;
    }
    public final boolean setParent({{=parent_class_name}} ancestor){
        if (IsNotEqual(this.parent,ancestor)){

            this.parent = ancestor;
            if (null != ancestor)
                this.parentKey = ancestor.getKey();
            return true;
        }
        else
            return false;
    }
{{/class_re_child}}{{!
}}{{#pfield}}
    public final boolean has{{=field_nameCamel}}(boolean mayInherit){
        return (null != this.get{{=field_nameCamel}}(mayInherit));
    }
    public final boolean hasNot{{=field_nameCamel}}(boolean mayInherit){
        return (null == this.get{{=field_nameCamel}}(mayInherit));
    }
    public final boolean drop{{=field_nameCamel}}(){
        if (null != this.{{=field_name}}){
            this.fieldStatistics.markDirty({{=class_name}}.Field.{{=field_nameCamel}});
            this.{{=field_name}} = null;{{#field_is_bigTable}}
            this.{{=field_name}}Id = null;
            this.{{=field_name}}Key = null;{{/field_is_bigTable}}
            return true;
        }
        else
            return false;
    }{{#field_is_bigTable}}
    public final String get{{=field_nameCamel}}Id(){
        return this.{{=field_name}}Id;
    }
    public final boolean set{{=field_nameCamel}}Id(String {{=field_name}}Id){
        if (IsNotEqual(this.{{=field_name}}Id,{{=field_name}}Id)){
            this.fieldStatistics.markDirty({{=class_name}}.Field.{{=field_nameCamel}});
            this.{{=field_name}}Id = {{=field_name}}Id;
            this.{{=field_name}}Key = null;
            this.{{=field_name}} = null;
            return true;
        }
        else
            return false;
    }
    public final Key get{{=field_nameCamel}}Key(){
        if (null == this.{{=field_name}}Key){
            /*
             * BigTable dereferencing
             */
            if (null != this.{{=field_name}}Id){{{#field_is_long}}
                this.{{=field_name}}Key = {{=field_class}}.KeyLongFor(this.{{=field_name}}Id);{{/field_is_long}}{{#field_is_short}}
                this.{{=field_name}}Key = {{=field_class}}.KeyShortFor(this.getKey(),this.{{=field_name}}Id);{{/field_is_short}}
            }
        }
        return this.{{=field_name}}Key;
    }{{#field_is_inheritable}}
    public final String get{{=field_nameCamel}}Id(boolean mayInherit){
        if (null != this.{{=field_name}}Id)
            return this.{{=field_name}}Id;
        else if (mayInherit && this.hasInheritFrom()){
            {{=class_name}} inheritFrom = this.getInheritFrom();
            return inheritFrom.get{{=field_nameCamel}}Id(mayInherit);
        }
        else
            return null;
    }
    public final Key get{{=field_nameCamel}}Key(boolean mayInherit){
        Key {{=field_name}}Key = this.get{{=field_nameCamel}}Key();
        if (null != {{=field_name}}Key)
            return {{=field_name}}Key;
        else if (mayInherit && this.hasInheritFrom()){
            {{=class_name}} inheritFrom = this.getInheritFrom();
            return inheritFrom.get{{=field_nameCamel}}Key(mayInherit);
        }
        else
            return null;
    }{{/field_is_inheritable}}{{/field_is_bigTable}}{{#field_is_not_inheritable}}
    public final {{=field_class}} get{{=field_nameCamel}}(){{{#field_is_not_bigTable}}
        return this.{{=field_name}};{{/field_is_not_bigTable}}{{#field_is_bigTable}}
        {{=field_class}} {{=field_name}} = this.{{=field_name}};
        if (null == {{=field_name}}){
            /*
             * BigTable dereference
             */
            Key {{=field_name}}Key = this.get{{=field_nameCamel}}Key();

            if (null != {{=field_name}}Key){
                {{=field_name}} = {{=field_class}}.Get({{=field_name}}Key);
                this.{{=field_name}} = {{=field_name}};
            }
        }
        return {{=field_name}};{{/field_is_bigTable}}
    }
    public final {{=field_class}} get{{=field_nameCamel}}(boolean mayInherit){
        return this.get{{=field_nameCamel}}();
    }{{/field_is_not_inheritable}}{{#field_is_inheritable}}
    public final {{=field_class}} get{{=field_nameCamel}}(){
        return this.get{{=field_nameCamel}}(Notation.MayInherit);
    }
    public final {{=field_class}} get{{=field_nameCamel}}(boolean mayInherit){{{#field_is_not_bigTable}}
        if (mayInherit){
            {{=field_class}} {{=field_name}} = this.{{=field_name}};
            if (null == {{=field_name}} && this.hasInheritFrom()){
                {{=class_name}} inheritFrom = this.getInheritFrom();
                return inheritFrom.get{{=field_nameCamel}}(Notation.MayInherit);
            }
            return {{=field_name}};
        }
        else
            return this.{{=field_name}};{{/field_is_not_bigTable}}{{#field_is_bigTable}}
        {{=field_class}} {{=field_name}} = this.{{=field_name}};
        if (null == {{=field_name}}){
            /*
             * BigTable dereference
             */
            Key {{=field_name}}Key = this.get{{=field_nameCamel}}Key(mayInherit);

            if (null != {{=field_name}}Key){
                {{=field_name}} = {{=field_class}}.Get({{=field_name}}Key);
                this.{{=field_name}} = {{=field_name}};
            }
        }

        if (null == {{=field_name}} && mayInherit && this.hasInheritFrom()){
            {{=class_name}} inheritFrom = this.getInheritFrom();
            return inheritFrom.get{{=field_nameCamel}}(Notation.MayInherit);
        }
        else
            return {{=field_name}};{{/field_is_bigTable}}
    }
    public final boolean set{{=field_nameCamel}}({{=field_class}} {{=field_name}}, boolean withInheritance){
        if (IsNotEqual(this.{{=field_name}},this.get{{=field_nameCamel}}(withInheritance))){
            this.fieldStatistics.markDirty({{=class_name}}.Field.{{=field_nameCamel}});
            this.{{=field_name}} = {{=field_name}};{{#field_is_bigTable}}
            if (null != {{=field_name}}){
                this.{{=field_name}}Id = {{=field_name}}.getId();
                this.{{=field_name}}Key = {{=field_name}}.getKey();
            }
            else {
                this.{{=field_name}}Id = null;
                this.{{=field_name}}Key = null;
            }{{/field_is_bigTable}}
            return true;
        }
        else
            return false;
    }{{/field_is_inheritable}}
    public final boolean set{{=field_nameCamel}}({{=field_class}} {{=field_name}}){
        if (IsNotEqual(this.{{=field_name}},{{=field_name}})){
            this.fieldStatistics.markDirty({{=class_name}}.Field.{{=field_nameCamel}});
            this.{{=field_name}} = {{=field_name}};{{#field_is_bigTable}}
            if (null != {{=field_name}}){
                this.{{=field_name}}Id = {{=field_name}}.getId();
                this.{{=field_name}}Key = {{=field_name}}.getKey();
            }
            else {
                this.{{=field_name}}Id = null;
                this.{{=field_name}}Key = null;
            }{{/field_is_bigTable}}
            return true;
        }
        else
            return false;
    }{{#field_is_number}}
    public final boolean set{{=field_nameCamel}}(Number {{=field_name}}){
        if (IsNotEqual(this.{{=field_name}},{{=field_name}})){
            this.fieldStatistics.markDirty({{=class_name}}.Field.{{=field_nameCamel}});
            if ({{=field_name}} instanceof {{=field_class}})
                this.{{=field_name}} = ({{=field_class}}){{=field_name}};
            else
                this.{{=field_name}} = new {{=field_class}}( {{=field_name}}.{{=field_numberValue}}());
            return true;
        }
        else
            return false;
    }{{/field_is_number}}{{/pfield}}{{!
 }}{{#cfield}}
    public final boolean has{{=field_nameCamel}}(boolean mayInherit){
        return (this.get{{=field_nameCamel}}(mayInherit).isNotEmpty());
    }
    public final boolean hasNot{{=field_nameCamel}}(boolean mayInherit){
        return (this.get{{=field_nameCamel}}(mayInherit).isEmpty());
    }
    public final boolean drop{{=field_nameCamel}}(){
        {{=field_class}} {{=field_name}} = this.{{=field_name}};
        if (null != {{=field_name}}){
            this.{{=field_name}} = null;
            {{=field_name}}.destroy();
            return true;
        }
        else
            return false;
    }
    public final {{=field_class}} get{{=field_nameCamel}}(){
        return this.get{{=field_nameCamel}}(Notation.MayInherit);
    }
    public final {{=field_class}} get{{=field_nameCamel}}(boolean mayInherit){
        {{=field_class}} {{=field_name}} = this.{{=field_name}};
        if (null == {{=field_name}}){
            if (mayInherit && this.hasInheritFrom()){
                {{=class_name}} inheritFrom = this.getInheritFrom();
                if (null != inheritFrom){
                    {{=field_name}} = inheritFrom.get{{=field_nameCamel}}(Notation.MayInherit);
                    if (null != {{=field_name}})
                        return {{=field_name}};
                }
            }
            /*
             * Collection type coersion
             */
            {
                Object tmp = new {{=field_impl_class_name}}(({{=class_name}})this);
                {{=field_name}} = ({{=field_class}})tmp;
            }
            this.{{=field_name}} = {{=field_name}};
            {{=field_name}}.init();
        }
        return {{=field_name}};
    }
    public final boolean set{{=field_nameCamel}}({{=field_class}} {{=field_name}}){
        if (IsNotEqual(this.{{=field_name}},{{=field_name}})){

            this.{{=field_name}} = {{=field_name}};
            return true;
        }
        else
            return false;
    }
    public final boolean isEmpty{{=field_nameCamel}}(){
        {{=field_class}} collection = this.{{=field_name}};
        if (null != collection)
            return collection.isEmpty();
        else
            return true;
    }
    public final boolean isNotEmpty{{=field_nameCamel}}(){
        {{=field_class}} collection = this.{{=field_name}};
        if (null != collection)
            return (!collection.isEmpty());
        else
            return false;
    }{{#field_is_list_long_or_short}}
    public final {{=field_list_component}} fetch{{=field_nameCamel}}(Filter filter){
        if (null != filter && KIND == filter.kind){
            {{=field_class}} collection = this.get{{=field_nameCamel}}(Notation.MayInherit);
            return collection.fetch(filter);
        }
        else
            throw new IllegalArgumentException();
    }{{/field_is_list_long_or_short}}{{#field_is_map_long_or_short}}
    public final {{=field_map_component_to}} fetch{{=field_nameCamel}}(Filter filter){
        if (null != filter && KIND == filter.kind){
            {{=field_class}} collection = this.get{{=field_nameCamel}}(Notation.MayInherit);
            return collection.fetch(filter);
        }
        else
            throw new IllegalArgumentException();
    }{{/field_is_map_long_or_short}}{{#field_is_list}}
    public final {{=field_list_component}} get{{=field_nameCamel}}(gap.data.ListFilter<{{=field_list_component}}> filter){
        if (null != filter){
            {{=field_class}} list = this.get{{=field_nameCamel}}(Notation.MayInherit);
            for ({{=field_list_component}} item : list){
                if (filter.accept(item))
                    return item;
            }
            return null;
        }
        else
            throw new IllegalArgumentException();
    }{{#field_list_component_named}}
    public final {{=field_list_component}} get{{=field_nameCamel}}ByName(String name){
        {{=field_class}} list = this.get{{=field_nameCamel}}(Notation.MayInherit);
        for ({{=field_list_component}} item : list){
            if (item.getName().equals(name))
                return item;
        }
        if (list.hitEnd()){
            Filter filter = new Filter("{{=field_list_component_kind}}").add({{=field_list_component}}.Field.For("name"),Filter.Op.eq,name);
            return list.fetch(filter);
        }
        return null;
    }{{/field_list_component_named}}{{/field_is_list}}{{#field_is_map}}
    public final {{=field_map_component_to}} get{{=field_nameCamel}}({{=field_map_component_from}} {{=field_name}}{{=field_map_component_from_nameCamel}}){
        if (null != {{=field_name}}{{=field_map_component_from_nameCamel}}){
            {{=field_class}} map = this.get{{=field_nameCamel}}(Notation.MayInherit);
            if (null != map)
                return map.get({{=field_name}}{{=field_map_component_from_nameCamel}});
            else
                return null;
        }
        else
            throw new IllegalArgumentException();
    }{{/field_is_map}}{{/cfield}}{{!
}}{{#tfield}}
    public final boolean has{{=field_nameCamel}}(){
        return (null != this.{{=field_name}});
    }
    public final boolean hasNot{{=field_nameCamel}}(){
        return (null == this.{{=field_name}});
    }
    public final {{=field_class}} get{{=field_nameCamel}}(){
        return this.{{=field_name}};
    }
    public final boolean set{{=field_nameCamel}}({{=field_class}} {{=field_name}}){
        if (IsNotEqual(this.{{=field_name}},{{=field_name}})){

            this.{{=field_name}} = {{=field_name}};
            return true;
        }
        else
            return false;
    }{{/tfield}}
    /*
     * Data binding supports
     */
    public final Kind getClassKind(){
        return KIND;
    }
    public final String getClassName(){
        return ClassName;
    }
    public final gap.data.List<gap.data.Field> getClassFields(){
        gap.data.List re = new {{=class_name}}.Field.List(Field.values());
        /*
         * Compiler has a type astigmatism (parameterized interface gap.data.Field)
         */
        return (gap.data.List<gap.data.Field>)re;
    }
    public final gap.data.Field getClassFieldByName(String name){
        return Field.getField(name);
    }
    public boolean updateFrom(Request req) throws ValidationError {
        boolean change = false;{{#pfield}}{{#field_is_primitive}}{{#field_is_not_unique}}
        String {{=field_name}}Request = req.getParameter("{{=field_name}}");
        if (null != {{=field_name}}Request && 0 < {{=field_name}}Request.length()){
            try {
                {{=field_class}} {{=field_name}} = {{=field_from_string_prefix}}{{=field_name}}Request{{=field_from_string_suffix}};
                if (this.set{{=field_nameCamel}}({{=field_name}})){
                    change = true;
                }
            }
            catch (RuntimeException exc){
                throw new ValidationError(ClassName,"{{=field_name}}",{{=field_name}}Request,exc);
            }
        }{{/field_is_not_unique}}{{/field_is_primitive}}{{/pfield}}
        return change;
    }
    public final boolean updateFrom(BigTable proto){
        return this.updateFrom( ({{=class_name}})proto);
    }
    public final boolean updateFrom({{=class_name}} proto){
        boolean mayInherit = (!this.hasInheritFromKey());
        boolean change = false;{{#pfield}}{{#field_is_primitive}}{{#field_is_not_unique}}
        {{=field_class}} {{=field_name}} = proto.get{{=field_nameCamel}}(mayInherit);
        if (null != {{=field_name}} && this.set{{=field_nameCamel}}({{=field_name}})){
            change = true;
        }{{/field_is_not_unique}}{{/field_is_primitive}}{{/pfield}}
        return change;
    }
    public java.io.Serializable valueStorage(gap.data.Field field){

        return Field.Storage( (Field)field, ({{=class_name}})this);
    }
    public void defineStorage(gap.data.Field field, java.io.Serializable value){

        Field.Storage( (Field)field, ({{=class_name}})this, value);
    }
    public final {{=class_name}} markClean(){

        this.fieldStatistics.markClean();
        return ({{=class_name}})this;
    }
    public final {{=class_name}} markDirty(){

        this.fieldStatistics.markDirty();
        return ({{=class_name}})this;
    }
    public final {{=class_name}} markDirty(gap.data.Field field){

        this.fieldStatistics.markDirty(field);
        return ({{=class_name}})this;
    }
    public final {{=class_name}} markDirty(java.io.Serializable instance){{{#field}}{{#field_it_First}}
        if (instance == this.{{=field_name}}){
            gap.data.Field field = {{=class_name}}.Field.{{=field_nameCamel}};
            return this.markDirty(field);
        }{{/field_it_First}}{{#field_it_NotFirst}}
        else if (instance == this.{{=field_name}}){
            gap.data.Field field = {{=class_name}}.Field.{{=field_nameCamel}};
            return this.markDirty(field);
        }{{/field_it_NotFirst}}{{/field}}
        else
            return ({{=class_name}})this;
    }
    public final Iterable<gap.data.Field> listClean(){

        return this.fieldStatistics.listClean();
    }
    public final Iterable<gap.data.Field> listDirty(){

        return this.fieldStatistics.listDirty();
    }
    public final boolean isClean(){

        return this.fieldStatistics.isClean();
    }
    public final boolean isDirty(){

        return this.fieldStatistics.isDirty();
    }
    public final gap.service.od.ClassDescriptor getClassDescriptorFor(){
        return {{=class_name}}.ClassDescriptorFor();
    }{{#class_re_child}}
    public final gap.service.od.ClassDescriptor getClassDescriptorForParent(){
        return {{=class_name}}.ClassDescriptorForParent();
    }{{/class_re_child}}
    /*
     * Template Data Dictionary
     */
    public boolean hasVariable(TemplateName name){
        Field field = {{=class_name}}.Field.For(name.getTerm());
        if (null != field){
            switch (field){
            case Id:
                if (name.is(0)){
                    String id = this.getId();
                    return (null != id);
                }
                else
                    return false;{{#pfield}}
            case {{=field_nameCamel}}:{{#field_is_bigTable}}
                if (name.has(1)){
                    {{=field_class}} {{=field_name}} = this.get{{=field_nameCamel}}(true);
                    if (null != {{=field_name}})
                        return {{=field_name}}.hasVariable(new TemplateName(name));
                    else
                        return false;
                }
                else {
                    /*
                     * Synthesize section for Field (EXISTS)
                     */
                    return this.has{{=field_nameCamel}}(true);
                }{{/field_is_bigTable}}{{#field_is_not_bigTable}}
                if (name.has(1))
                    throw new IllegalStateException(field.name());
                else {{{#field_is_boolean}}
                    /*
                     * Synthesize section for Boolean (EXISTS && TRUE)
                     */
                    return (this.has{{=field_nameCamel}}(true) && this.get{{=field_nameCamel}}(true));{{/field_is_boolean}}{{#field_is_not_boolean}}
                    /*
                     * Synthesize section for Field (EXISTS)
                     */
                    return this.has{{=field_nameCamel}}(true);{{/field_is_not_boolean}}
                }{{/field_is_not_bigTable}}{{/pfield}}
            default:
                throw new IllegalStateException(field.name());
            }
        }
        else {
            return super.hasVariable(name);
        }
    }
    public String getVariable(TemplateName name){
        Field field = {{=class_name}}.Field.For(name.getTerm());
        if (null != field){
            switch (field){
            case Id:
                if (name.is(0))
                    return this.getId();
                else
                    return null;{{#pfield}}
            case {{=field_nameCamel}}:{{#field_is_bigTable}}
                if (name.has(1)){
                    {{=field_class}} {{=field_name}} = this.get{{=field_nameCamel}}(Notation.MayInherit);
                    if (null != {{=field_name}})
                        return {{=field_name}}.getVariable(new TemplateName(name));
                    else
                        return null;
                }
                else{{#field_is_unique}}
                    return this.get{{=field_nameCamel}}Id();{{/field_is_unique}}{{#field_is_not_unique}}
                    return this.get{{=field_nameCamel}}Id(Notation.MayInherit);{{/field_is_not_unique}}{{/field_is_bigTable}}{{#field_is_not_bigTable}}
                if (name.has(1))
                    throw new IllegalStateException(field.name());
                else
                    return {{=field_to_string_prefix}}this.get{{=field_nameCamel}}(true){{=field_to_string_suffix}};{{/field_is_not_bigTable}}{{/pfield}}
            default:
                throw new IllegalStateException(field.name());
            }
        }
        else {
            return super.getVariable(name);
        }
    }
    public void setVariable(TemplateName name, String value){
        Field field = {{=class_name}}.Field.For(name.getTerm());
        if (null != field){
            if (name.has(1)){
                switch (field){
                case Id:
                    throw new UnsupportedOperationException(field.name());{{#pfield}}
                case {{=field_nameCamel}}:{{#field_is_bigTable}}

                    {{=field_class}} {{=field_name}} = this.get{{=field_nameCamel}}(true);
                    if (null != {{=field_name}})
                        {{=field_name}}.setVariable(new TemplateName(name),value);

                    return ;{{/field_is_bigTable}}{{#field_is_not_bigTable}}
                    throw new IllegalStateException(field.name());{{/field_is_not_bigTable}}{{/pfield}}
                default:
                    throw new IllegalStateException(field.name());
                }
            }
            else
                Field.Set(field,(({{=class_name}})this),value);
        }
        else {
            super.setVariable(name,value);
        }
    }
    public List.Short<TemplateDataDictionary> getSection(TemplateName name){
        Field field = {{=class_name}}.Field.For(name.getTerm());
        if (null != field){
            switch (field){{{#pfield}}
            case {{=field_nameCamel}}:{{#field_is_bigTable}}
                {{=field_class}} {{=field_name}} = this.get{{=field_nameCamel}}(true);
                if (null != {{=field_name}})
                    return {{=field_name}}.getSection(new TemplateName(name));
                else
                    return null;{{/field_is_bigTable}}{{#field_is_not_bigTable}}
                return null;{{/field_is_not_bigTable}}{{/pfield}}
            default:
                throw new IllegalStateException(field.name());
            }
        }
        else {
            return super.getSection(name);
        }
    }
    public {{=class_name}} clone(){
        return ({{=class_name}})super.clone();
    }
    public String pathto(){
        return PathTo(this.getId());
    }
    public String pathto(String subpath){
        StringBuilder string = new StringBuilder();
        string.append(this.getId());
        if (null != subpath){
            if (0 == subpath.length() || '/' != subpath.charAt(0))
                string.append('/');
            string.append(subpath);
        }
        return PathTo(string.toString());
    }
}
